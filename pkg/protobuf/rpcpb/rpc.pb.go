// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: rpcpb/rpc.proto

package rpcpb

import (
	commonpb "github.com/hideckies/hermit/pkg/protobuf/commonpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Operator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid  string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name  string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Login string `protobuf:"bytes,4,opt,name=login,proto3" json:"login,omitempty"`
}

func (x *Operator) Reset() {
	*x = Operator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcpb_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator) ProtoMessage() {}

func (x *Operator) ProtoReflect() protoreflect.Message {
	mi := &file_rpcpb_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator.ProtoReflect.Descriptor instead.
func (*Operator) Descriptor() ([]byte, []int) {
	return file_rpcpb_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *Operator) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Operator) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Operator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Operator) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

type Listener struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid     string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Protocol string `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Host     string `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	Port     int32  `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`
	Domains  string `protobuf:"bytes,7,opt,name=domains,proto3" json:"domains,omitempty"`
	Active   bool   `protobuf:"varint,8,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *Listener) Reset() {
	*x = Listener{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcpb_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Listener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Listener) ProtoMessage() {}

func (x *Listener) ProtoReflect() protoreflect.Message {
	mi := &file_rpcpb_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Listener.ProtoReflect.Descriptor instead.
func (*Listener) Descriptor() ([]byte, []int) {
	return file_rpcpb_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *Listener) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Listener) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Listener) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Listener) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Listener) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Listener) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Listener) GetDomains() string {
	if x != nil {
		return x.Domains
	}
	return ""
}

func (x *Listener) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type ListenerPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PayloadName string `protobuf:"bytes,2,opt,name=payloadName,proto3" json:"payloadName,omitempty"`
}

func (x *ListenerPayload) Reset() {
	*x = ListenerPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcpb_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenerPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerPayload) ProtoMessage() {}

func (x *ListenerPayload) ProtoReflect() protoreflect.Message {
	mi := &file_rpcpb_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerPayload.ProtoReflect.Descriptor instead.
func (*ListenerPayload) Descriptor() ([]byte, []int) {
	return file_rpcpb_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *ListenerPayload) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListenerPayload) GetPayloadName() string {
	if x != nil {
		return x.PayloadName
	}
	return ""
}

type PayloadImplant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid             string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name             string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Os               string `protobuf:"bytes,4,opt,name=os,proto3" json:"os,omitempty"`
	Arch             string `protobuf:"bytes,5,opt,name=arch,proto3" json:"arch,omitempty"`
	Format           string `protobuf:"bytes,6,opt,name=format,proto3" json:"format,omitempty"`
	Lprotocol        string `protobuf:"bytes,7,opt,name=lprotocol,proto3" json:"lprotocol,omitempty"`
	Lhost            string `protobuf:"bytes,8,opt,name=lhost,proto3" json:"lhost,omitempty"`
	Lport            int32  `protobuf:"varint,9,opt,name=lport,proto3" json:"lport,omitempty"`
	Type             string `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	Sleep            int64  `protobuf:"varint,11,opt,name=sleep,proto3" json:"sleep,omitempty"`
	Jitter           int64  `protobuf:"varint,12,opt,name=jitter,proto3" json:"jitter,omitempty"`
	KillDate         int64  `protobuf:"varint,13,opt,name=killDate,proto3" json:"killDate,omitempty"`
	IndirectSyscalls bool   `protobuf:"varint,14,opt,name=indirectSyscalls,proto3" json:"indirectSyscalls,omitempty"`
	AntiDebug        bool   `protobuf:"varint,15,opt,name=antiDebug,proto3" json:"antiDebug,omitempty"`
	CompLevel        int64  `protobuf:"varint,16,opt,name=compLevel,proto3" json:"compLevel,omitempty"`
}

func (x *PayloadImplant) Reset() {
	*x = PayloadImplant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcpb_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayloadImplant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadImplant) ProtoMessage() {}

func (x *PayloadImplant) ProtoReflect() protoreflect.Message {
	mi := &file_rpcpb_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadImplant.ProtoReflect.Descriptor instead.
func (*PayloadImplant) Descriptor() ([]byte, []int) {
	return file_rpcpb_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *PayloadImplant) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PayloadImplant) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PayloadImplant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PayloadImplant) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *PayloadImplant) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *PayloadImplant) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *PayloadImplant) GetLprotocol() string {
	if x != nil {
		return x.Lprotocol
	}
	return ""
}

func (x *PayloadImplant) GetLhost() string {
	if x != nil {
		return x.Lhost
	}
	return ""
}

func (x *PayloadImplant) GetLport() int32 {
	if x != nil {
		return x.Lport
	}
	return 0
}

func (x *PayloadImplant) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PayloadImplant) GetSleep() int64 {
	if x != nil {
		return x.Sleep
	}
	return 0
}

func (x *PayloadImplant) GetJitter() int64 {
	if x != nil {
		return x.Jitter
	}
	return 0
}

func (x *PayloadImplant) GetKillDate() int64 {
	if x != nil {
		return x.KillDate
	}
	return 0
}

func (x *PayloadImplant) GetIndirectSyscalls() bool {
	if x != nil {
		return x.IndirectSyscalls
	}
	return false
}

func (x *PayloadImplant) GetAntiDebug() bool {
	if x != nil {
		return x.AntiDebug
	}
	return false
}

func (x *PayloadImplant) GetCompLevel() int64 {
	if x != nil {
		return x.CompLevel
	}
	return 0
}

type PayloadLoader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid             string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name             string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Os               string `protobuf:"bytes,4,opt,name=os,proto3" json:"os,omitempty"`
	Arch             string `protobuf:"bytes,5,opt,name=arch,proto3" json:"arch,omitempty"`
	Format           string `protobuf:"bytes,6,opt,name=format,proto3" json:"format,omitempty"`
	Lprotocol        string `protobuf:"bytes,7,opt,name=lprotocol,proto3" json:"lprotocol,omitempty"`
	Lhost            string `protobuf:"bytes,8,opt,name=lhost,proto3" json:"lhost,omitempty"`
	Lport            int32  `protobuf:"varint,9,opt,name=lport,proto3" json:"lport,omitempty"`
	Type             string `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	PayloadToLoad    string `protobuf:"bytes,11,opt,name=payloadToLoad,proto3" json:"payloadToLoad,omitempty"`
	Technique        string `protobuf:"bytes,12,opt,name=technique,proto3" json:"technique,omitempty"`
	ProcessToInject  string `protobuf:"bytes,13,opt,name=processToInject,proto3" json:"processToInject,omitempty"`
	IndirectSyscalls bool   `protobuf:"varint,14,opt,name=indirectSyscalls,proto3" json:"indirectSyscalls,omitempty"`
	AntiDebug        bool   `protobuf:"varint,15,opt,name=antiDebug,proto3" json:"antiDebug,omitempty"`
	CompLevel        int64  `protobuf:"varint,16,opt,name=compLevel,proto3" json:"compLevel,omitempty"`
}

func (x *PayloadLoader) Reset() {
	*x = PayloadLoader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcpb_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayloadLoader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadLoader) ProtoMessage() {}

func (x *PayloadLoader) ProtoReflect() protoreflect.Message {
	mi := &file_rpcpb_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadLoader.ProtoReflect.Descriptor instead.
func (*PayloadLoader) Descriptor() ([]byte, []int) {
	return file_rpcpb_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *PayloadLoader) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PayloadLoader) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PayloadLoader) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PayloadLoader) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *PayloadLoader) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *PayloadLoader) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *PayloadLoader) GetLprotocol() string {
	if x != nil {
		return x.Lprotocol
	}
	return ""
}

func (x *PayloadLoader) GetLhost() string {
	if x != nil {
		return x.Lhost
	}
	return ""
}

func (x *PayloadLoader) GetLport() int32 {
	if x != nil {
		return x.Lport
	}
	return 0
}

func (x *PayloadLoader) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PayloadLoader) GetPayloadToLoad() string {
	if x != nil {
		return x.PayloadToLoad
	}
	return ""
}

func (x *PayloadLoader) GetTechnique() string {
	if x != nil {
		return x.Technique
	}
	return ""
}

func (x *PayloadLoader) GetProcessToInject() string {
	if x != nil {
		return x.ProcessToInject
	}
	return ""
}

func (x *PayloadLoader) GetIndirectSyscalls() bool {
	if x != nil {
		return x.IndirectSyscalls
	}
	return false
}

func (x *PayloadLoader) GetAntiDebug() bool {
	if x != nil {
		return x.AntiDebug
	}
	return false
}

func (x *PayloadLoader) GetCompLevel() int64 {
	if x != nil {
		return x.CompLevel
	}
	return 0
}

type PayloadModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid      string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Os        string `protobuf:"bytes,4,opt,name=os,proto3" json:"os,omitempty"`
	Arch      string `protobuf:"bytes,5,opt,name=arch,proto3" json:"arch,omitempty"`
	Format    string `protobuf:"bytes,6,opt,name=format,proto3" json:"format,omitempty"`
	Lprotocol string `protobuf:"bytes,7,opt,name=lprotocol,proto3" json:"lprotocol,omitempty"`
	Lhost     string `protobuf:"bytes,8,opt,name=lhost,proto3" json:"lhost,omitempty"`
	Lport     int32  `protobuf:"varint,9,opt,name=lport,proto3" json:"lport,omitempty"`
	Type      string `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *PayloadModule) Reset() {
	*x = PayloadModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcpb_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayloadModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadModule) ProtoMessage() {}

func (x *PayloadModule) ProtoReflect() protoreflect.Message {
	mi := &file_rpcpb_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadModule.ProtoReflect.Descriptor instead.
func (*PayloadModule) Descriptor() ([]byte, []int) {
	return file_rpcpb_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *PayloadModule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PayloadModule) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PayloadModule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PayloadModule) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *PayloadModule) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *PayloadModule) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *PayloadModule) GetLprotocol() string {
	if x != nil {
		return x.Lprotocol
	}
	return ""
}

func (x *PayloadModule) GetLhost() string {
	if x != nil {
		return x.Lhost
	}
	return ""
}

func (x *PayloadModule) GetLport() int32 {
	if x != nil {
		return x.Lport
	}
	return 0
}

func (x *PayloadModule) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Agent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid        string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Ip          string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Os          string `protobuf:"bytes,5,opt,name=os,proto3" json:"os,omitempty"`
	Arch        string `protobuf:"bytes,6,opt,name=arch,proto3" json:"arch,omitempty"`
	Hostname    string `protobuf:"bytes,7,opt,name=hostname,proto3" json:"hostname,omitempty"`
	ListenerURL string `protobuf:"bytes,8,opt,name=listenerURL,proto3" json:"listenerURL,omitempty"`
	ImplantType string `protobuf:"bytes,9,opt,name=implantType,proto3" json:"implantType,omitempty"`
	CheckInDate string `protobuf:"bytes,10,opt,name=checkInDate,proto3" json:"checkInDate,omitempty"`
	Sleep       int64  `protobuf:"varint,11,opt,name=sleep,proto3" json:"sleep,omitempty"`
	Jitter      int64  `protobuf:"varint,12,opt,name=jitter,proto3" json:"jitter,omitempty"`
	KillDate    int64  `protobuf:"varint,13,opt,name=killDate,proto3" json:"killDate,omitempty"`
	AesKey      string `protobuf:"bytes,14,opt,name=aesKey,proto3" json:"aesKey,omitempty"`
	AesIV       string `protobuf:"bytes,15,opt,name=aesIV,proto3" json:"aesIV,omitempty"`
	SessionId   string `protobuf:"bytes,16,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
}

func (x *Agent) Reset() {
	*x = Agent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcpb_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Agent) ProtoMessage() {}

func (x *Agent) ProtoReflect() protoreflect.Message {
	mi := &file_rpcpb_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Agent.ProtoReflect.Descriptor instead.
func (*Agent) Descriptor() ([]byte, []int) {
	return file_rpcpb_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *Agent) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Agent) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Agent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Agent) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Agent) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *Agent) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *Agent) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Agent) GetListenerURL() string {
	if x != nil {
		return x.ListenerURL
	}
	return ""
}

func (x *Agent) GetImplantType() string {
	if x != nil {
		return x.ImplantType
	}
	return ""
}

func (x *Agent) GetCheckInDate() string {
	if x != nil {
		return x.CheckInDate
	}
	return ""
}

func (x *Agent) GetSleep() int64 {
	if x != nil {
		return x.Sleep
	}
	return 0
}

func (x *Agent) GetJitter() int64 {
	if x != nil {
		return x.Jitter
	}
	return 0
}

func (x *Agent) GetKillDate() int64 {
	if x != nil {
		return x.KillDate
	}
	return 0
}

func (x *Agent) GetAesKey() string {
	if x != nil {
		return x.AesKey
	}
	return ""
}

func (x *Agent) GetAesIV() string {
	if x != nil {
		return x.AesIV
	}
	return ""
}

func (x *Agent) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task      string `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	AgentName string `protobuf:"bytes,2,opt,name=agentName,proto3" json:"agentName,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcpb_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_rpcpb_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_rpcpb_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *Task) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *Task) GetAgentName() string {
	if x != nil {
		return x.AgentName
	}
	return ""
}

type Loot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentName string `protobuf:"bytes,1,opt,name=agentName,proto3" json:"agentName,omitempty"`
	Filter    string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *Loot) Reset() {
	*x = Loot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpcpb_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Loot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Loot) ProtoMessage() {}

func (x *Loot) ProtoReflect() protoreflect.Message {
	mi := &file_rpcpb_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Loot.ProtoReflect.Descriptor instead.
func (*Loot) Descriptor() ([]byte, []int) {
	return file_rpcpb_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *Loot) GetAgentName() string {
	if x != nil {
		return x.AgentName
	}
	return ""
}

func (x *Loot) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

var File_rpcpb_rpc_proto protoreflect.FileDescriptor

var file_rpcpb_rpc_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x72, 0x70, 0x63, 0x70, 0x62, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x58, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0xb8, 0x01, 0x0a, 0x08, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x22, 0x43, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x94, 0x03, 0x0a, 0x0e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x6c, 0x65, 0x65, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x53, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x79, 0x73, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x74, 0x69, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6e, 0x74, 0x69, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x22, 0xb7, 0x03, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x6f, 0x4c, 0x6f, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x49, 0x6e, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x79,
	0x73, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x6e, 0x74, 0x69, 0x44, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x61, 0x6e, 0x74, 0x69, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xe1, 0x01, 0x0a, 0x0d, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8b,
	0x03, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x55,
	0x52, 0x4c, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x65, 0x73, 0x49,
	0x56, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x65, 0x73, 0x49, 0x56, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x04,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x04, 0x4c, 0x6f, 0x6f, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x32, 0xd2, 0x0b, 0x0a, 0x09, 0x48, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x52,
	0x50, 0x43, 0x12, 0x30, 0x0a, 0x08, 0x53, 0x61, 0x79, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x72,
	0x70, 0x63, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x00, 0x12, 0x3b, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x0e, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12,
	0x32, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x49, 0x64,
	0x1a, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x00, 0x30, 0x01, 0x12, 0x35, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x0f, 0x2e, 0x72,
	0x70, 0x63, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x1a, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x00, 0x12, 0x36, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x12, 0x37, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x49, 0x64,
	0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x12, 0x32, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x47, 0x65, 0x74, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x49,
	0x64, 0x1a, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x22, 0x00, 0x30, 0x01, 0x12, 0x43, 0x0a, 0x16,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x1a, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x22,
	0x00, 0x12, 0x41, 0x0a, 0x15, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x61, 0x64,
	0x65, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x72, 0x70, 0x63,
	0x70, 0x62, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x15, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0f, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x2c, 0x0a,
	0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0b, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x35, 0x0a,
	0x0d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x74, 0x42,
	0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0b, 0x2e, 0x72, 0x70, 0x63,
	0x70, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x14,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x42, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0b, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0b, 0x2e,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12,
	0x2e, 0x0a, 0x0a, 0x4c, 0x6f, 0x6f, 0x74, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x0b, 0x2e,
	0x72, 0x70, 0x63, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x6f, 0x74, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12,
	0x38, 0x0a, 0x14, 0x4c, 0x6f, 0x6f, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x42, 0x79, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0b, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2e,
	0x4c, 0x6f, 0x6f, 0x74, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x42, 0x5c, 0x0a, 0x1e, 0x6f, 0x72, 0x67,
	0x2e, 0x68, 0x64, 0x6b, 0x73, 0x2e, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x72, 0x70, 0x63, 0x70, 0x62, 0x42, 0x08, 0x52, 0x50, 0x43,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x69, 0x64, 0x65, 0x63, 0x6b, 0x69, 0x65, 0x73, 0x2f, 0x68, 0x65,
	0x72, 0x6d, 0x69, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x72, 0x70, 0x63, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpcpb_rpc_proto_rawDescOnce sync.Once
	file_rpcpb_rpc_proto_rawDescData = file_rpcpb_rpc_proto_rawDesc
)

func file_rpcpb_rpc_proto_rawDescGZIP() []byte {
	file_rpcpb_rpc_proto_rawDescOnce.Do(func() {
		file_rpcpb_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpcpb_rpc_proto_rawDescData)
	})
	return file_rpcpb_rpc_proto_rawDescData
}

var file_rpcpb_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_rpcpb_rpc_proto_goTypes = []interface{}{
	(*Operator)(nil),         // 0: rpcpb.Operator
	(*Listener)(nil),         // 1: rpcpb.Listener
	(*ListenerPayload)(nil),  // 2: rpcpb.ListenerPayload
	(*PayloadImplant)(nil),   // 3: rpcpb.PayloadImplant
	(*PayloadLoader)(nil),    // 4: rpcpb.PayloadLoader
	(*PayloadModule)(nil),    // 5: rpcpb.PayloadModule
	(*Agent)(nil),            // 6: rpcpb.Agent
	(*Task)(nil),             // 7: rpcpb.Task
	(*Loot)(nil),             // 8: rpcpb.Loot
	(*commonpb.Empty)(nil),   // 9: commonpb.Empty
	(*commonpb.Uuid)(nil),    // 10: commonpb.Uuid
	(*commonpb.Id)(nil),      // 11: commonpb.Id
	(*commonpb.Message)(nil), // 12: commonpb.Message
	(*commonpb.Binary)(nil),  // 13: commonpb.Binary
}
var file_rpcpb_rpc_proto_depIdxs = []int32{
	9,  // 0: rpcpb.HermitRPC.SayHello:input_type -> commonpb.Empty
	9,  // 1: rpcpb.HermitRPC.GetVersion:input_type -> commonpb.Empty
	0,  // 2: rpcpb.HermitRPC.OperatorRegister:input_type -> rpcpb.Operator
	10, // 3: rpcpb.HermitRPC.OperatorDeleteByUuid:input_type -> commonpb.Uuid
	11, // 4: rpcpb.HermitRPC.OperatorGetById:input_type -> commonpb.Id
	9,  // 5: rpcpb.HermitRPC.OperatorGetAll:input_type -> commonpb.Empty
	1,  // 6: rpcpb.HermitRPC.ListenerStart:input_type -> rpcpb.Listener
	11, // 7: rpcpb.HermitRPC.ListenerStartById:input_type -> commonpb.Id
	11, // 8: rpcpb.HermitRPC.ListenerStopById:input_type -> commonpb.Id
	11, // 9: rpcpb.HermitRPC.ListenerDeleteById:input_type -> commonpb.Id
	11, // 10: rpcpb.HermitRPC.ListenerPayloadsById:input_type -> commonpb.Id
	2,  // 11: rpcpb.HermitRPC.ListenerPayloadsDeleteById:input_type -> rpcpb.ListenerPayload
	11, // 12: rpcpb.HermitRPC.ListenerGetById:input_type -> commonpb.Id
	9,  // 13: rpcpb.HermitRPC.ListenerGetAll:input_type -> commonpb.Empty
	3,  // 14: rpcpb.HermitRPC.PayloadImplantGenerate:input_type -> rpcpb.PayloadImplant
	4,  // 15: rpcpb.HermitRPC.PayloadLoaderGenerate:input_type -> rpcpb.PayloadLoader
	5,  // 16: rpcpb.HermitRPC.PayloadModuleGenerate:input_type -> rpcpb.PayloadModule
	11, // 17: rpcpb.HermitRPC.AgentDeleteById:input_type -> commonpb.Id
	11, // 18: rpcpb.HermitRPC.AgentGetById:input_type -> commonpb.Id
	9,  // 19: rpcpb.HermitRPC.AgentGetAll:input_type -> commonpb.Empty
	9,  // 20: rpcpb.HermitRPC.AgentTaskList:input_type -> commonpb.Empty
	7,  // 21: rpcpb.HermitRPC.TaskSetByAgentName:input_type -> rpcpb.Task
	7,  // 22: rpcpb.HermitRPC.TaskClearByAgentName:input_type -> rpcpb.Task
	7,  // 23: rpcpb.HermitRPC.TaskListByAgentName:input_type -> rpcpb.Task
	8,  // 24: rpcpb.HermitRPC.LootGetAll:input_type -> rpcpb.Loot
	8,  // 25: rpcpb.HermitRPC.LootClearByAgentName:input_type -> rpcpb.Loot
	12, // 26: rpcpb.HermitRPC.SayHello:output_type -> commonpb.Message
	12, // 27: rpcpb.HermitRPC.GetVersion:output_type -> commonpb.Message
	12, // 28: rpcpb.HermitRPC.OperatorRegister:output_type -> commonpb.Message
	12, // 29: rpcpb.HermitRPC.OperatorDeleteByUuid:output_type -> commonpb.Message
	0,  // 30: rpcpb.HermitRPC.OperatorGetById:output_type -> rpcpb.Operator
	0,  // 31: rpcpb.HermitRPC.OperatorGetAll:output_type -> rpcpb.Operator
	12, // 32: rpcpb.HermitRPC.ListenerStart:output_type -> commonpb.Message
	12, // 33: rpcpb.HermitRPC.ListenerStartById:output_type -> commonpb.Message
	12, // 34: rpcpb.HermitRPC.ListenerStopById:output_type -> commonpb.Message
	12, // 35: rpcpb.HermitRPC.ListenerDeleteById:output_type -> commonpb.Message
	12, // 36: rpcpb.HermitRPC.ListenerPayloadsById:output_type -> commonpb.Message
	12, // 37: rpcpb.HermitRPC.ListenerPayloadsDeleteById:output_type -> commonpb.Message
	1,  // 38: rpcpb.HermitRPC.ListenerGetById:output_type -> rpcpb.Listener
	1,  // 39: rpcpb.HermitRPC.ListenerGetAll:output_type -> rpcpb.Listener
	13, // 40: rpcpb.HermitRPC.PayloadImplantGenerate:output_type -> commonpb.Binary
	13, // 41: rpcpb.HermitRPC.PayloadLoaderGenerate:output_type -> commonpb.Binary
	13, // 42: rpcpb.HermitRPC.PayloadModuleGenerate:output_type -> commonpb.Binary
	12, // 43: rpcpb.HermitRPC.AgentDeleteById:output_type -> commonpb.Message
	6,  // 44: rpcpb.HermitRPC.AgentGetById:output_type -> rpcpb.Agent
	6,  // 45: rpcpb.HermitRPC.AgentGetAll:output_type -> rpcpb.Agent
	12, // 46: rpcpb.HermitRPC.AgentTaskList:output_type -> commonpb.Message
	12, // 47: rpcpb.HermitRPC.TaskSetByAgentName:output_type -> commonpb.Message
	12, // 48: rpcpb.HermitRPC.TaskClearByAgentName:output_type -> commonpb.Message
	12, // 49: rpcpb.HermitRPC.TaskListByAgentName:output_type -> commonpb.Message
	12, // 50: rpcpb.HermitRPC.LootGetAll:output_type -> commonpb.Message
	12, // 51: rpcpb.HermitRPC.LootClearByAgentName:output_type -> commonpb.Message
	26, // [26:52] is the sub-list for method output_type
	0,  // [0:26] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_rpcpb_rpc_proto_init() }
func file_rpcpb_rpc_proto_init() {
	if File_rpcpb_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpcpb_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcpb_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Listener); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcpb_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenerPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcpb_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayloadImplant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcpb_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayloadLoader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcpb_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayloadModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcpb_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Agent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcpb_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpcpb_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Loot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpcpb_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpcpb_rpc_proto_goTypes,
		DependencyIndexes: file_rpcpb_rpc_proto_depIdxs,
		MessageInfos:      file_rpcpb_rpc_proto_msgTypes,
	}.Build()
	File_rpcpb_rpc_proto = out.File
	file_rpcpb_rpc_proto_rawDesc = nil
	file_rpcpb_rpc_proto_goTypes = nil
	file_rpcpb_rpc_proto_depIdxs = nil
}
